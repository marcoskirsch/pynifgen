Classes
=======
There are two classes available in ``pynifgen`` to simplify the creation of visessions: ``PyViSession`` and ``InitExtCal``.  ``PyViSession`` is used for all signal generation except for external calibration, while ``InitExtCal`` is used for signal calibration.  These classes are initialized with:

.. code:: python

    import pynifgen
    vi = pynifgen.PyViSession('myDAQmxDevice')

A simulated device can be initialized by setting the ``optionsString`` parameter:

.. code:: python

    option = 'Simulate=1,DriverSetup=Model:5402;BoardType:PCI'
    visession = pynifgen.InitWithOptions(resourceName, optionString=option)

Each method belonging to the two classes is named after the corresponding function belonging to the NI-FGEN C driver.   For example, the method ``ConfigureOutputEnabled`` is named after the C function ``niFgen_ConfigureOutputEnabled`` which is also available to the user as ``pynifgen.niFgen_ConfigureOutputEnabled``.  These classes simplify the user's interaction with the NI-FGEN software by keeping track of the ``ViSession*`` session handle as well as simplifying inputs.  For example, the function ``niFgen_CreateFreqList``:

.. code::

    >>> help(pynifgen.niFgen_CreateFreqList)

    niFgen_CreateFreqList(vi, waveform, frequencyListLength, frequencyArray, durationArray, frequencyListHandle)
        Autogenerated generated function from niFgen.h
        
        For additional help see:
        http://zone.ni.com/reference/en-XX/help/370524P-01/fgencref/nifgen_functions/
        
        Parameters
        ----------
        vi : ViSession
        waveform : ViInt32
        frequencyListLength : ViInt32
        frequencyArray[] : ViReal64
        durationArray[] : ViReal64
        *frequencyListHandle : ViInt32
        
        Returns
        -------
        vistatus

is simplified to:

.. code::

    >>> vi = pynifgen.PyViSession('myDAQmxDevice')
    >>> help(vi.CreateFreqList)
    
    Help on method CreateFreqList in module pynifgen.functions:
    
    CreateFreqList(self, waveform='NIFGEN_VAL_WFM_SINE', frequencyArray=None,
                   durationArray=None)
                
        Parameters
        ----------
        waveform : str, optional
            Specifies the standard waveform that you want the signal generator 
            to produce.  Must be a string from one of the following:
                
            - "NIFGEN_VAL_WFM_SINE"
            - "NIFGEN_VAL_WFM_SQUARE"
            - "NIFGEN_VAL_WFM_TRIANGLE"
            - "NIFGEN_VAL_WFM_RAMP_UP"
            - "NIFGEN_VAL_WFM_RAMP_DOWN"
            - "NIFGEN_VAL_WFM_DC Constant"
            - "NIFGEN_VAL_WFM_NOISE"
            - "NIFGEN_VAL_WFM_USER"
                                             
             Defaults to "NIFGEN_VAL_WFM_SINE"
             
        frequencyArray : numpy.ndarray
            Specifies the array of frequencies to form the frequency list. The
            array must have at least as many elements as the value you specify 
            in the durationArray. Each frequencyArray element has a 
            corresponding durationArray element that indicates how long that 
            frequency is repeated.  Units in Hertz and default to None.
        
        durationArray : numpy.ndarray
                Specifies the array of durations to form the frequency list. 
                The array must have at least as many elements as the value that
                you specify in frequencyArray. Each durationArray element has a
                corresponding frequencyArray element and indicates how long in
                seconds to generate the corresponding frequency.  Units in 
                seconds and defaults to None.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        frequencyListHandle : int
            The handle that identifies the new frequency list. You can pass 
            this handle to niFgen_ConfigureFreqList to generate the arbitrary 
            sequence.
        

Creating a frequency list with the object is eaiser with:

.. code:: python

    npart = 100
    frequencyArray = np.linspace(100, 1000, npart)
    durationArray = np.empty_like(frequencyArray)
    durationArray[:] = 0.001
    vistatus, frequencyListHandle = vi.CreateFreqList("IVIFGEN_VAL_WFM_SQUARE",
                                                      frequencyArray,
                                                      durationArray)

as opposed to:

.. code:: python

    npart = 100
    frequencyArray = np.linspace(100, 1000, npart)
    durationArray = np.empty_like(frequencyArray)
    durationArray[:] = 0.001
    fListHandle = ctypes.c_int() # frequency list handle
    pynifgen.niFgen_CreateFreqList(vi, pynifgen.IVIFGEN_VAL_WFM_SQUARE,
                                   frequencyArray.size, frequencyArray,
                                   durationArray,
                                   fListHandle)

For detailed examples see the Examples tab.


PyViSession
-----------
.. autoclass:: pynifgen.PyViSession
    :members:


InitExtCal
----------
.. autoclass:: pynifgen.InitExtCal
    :members: