"""
Contains 

Used documentation from
http://zone.ni.com/reference/en-XX/help/370524P-01/fgencref/nifgen_functions/

"""
import os
import warnings
import ctypes

import pynifgen

# attempt to import numpy
try:
    import numpy as np
except:
    pass


# python2/3 compatability
try:
    basestring
except NameError:
    basestring = str

def triggers():
    """
    NIFGEN_VAL_SINGLE
        The waveform that you describe in the sequence list generates only once
        by going through the entire staging list. Only one trigger is required 
        to start the waveform generation. You can use Single trigger mode in 
        any output mode. After a trigger is received, the waveform generation 
        starts from the first stage and continues through to the last stage.
    
    NIFGEN_VAL_CONTINUOUS
        The waveform that you describe in the staging list generates infinitely
        by repeatedly cycling through the staging list. After a trigger is 
        received, the waveform generation starts from the first stage and 
        continues through to the last stage. After the last stage is completed,
        the waveform generation loops back to the start of the first stage and 
        continues until it is stopped. Only one trigger is required to start 
        the waveform generation.
    
    NIFGEN_VAL_STEPPED
        After a start trigger is received, the waveform described by the first 
        stage generates. Then, the device waits for the next trigger signal. On
        the next trigger, the waveform described by the second stage generates,
        and so on. After the staging list is exhausted, the waveform generation
        returns to the first stage and continues to repeat the cycle.
    
    NIFGEN_VAL_BURST
        After a Start trigger is received, the waveform described by the first 
        stage generates until another trigger is received. At the next trigger,
        the buffer of the previous stage completes, then the waveform described
        by the second stage generates. After the staging list is exhausted, the
        waveform generation returns to the first stage and continues to repeat 
        the cycle. In Frequency List mode, the duration instruction is ignored,
        and the trigger switches the frequency to the next frequency in the
        list.
    """

def EvalAttr(attribute_str):
    """ Takes a attribute string and evaluates it """
    if not isinstance(attribute_str, basestring):
        raise Exception('Attribute must be input as a string')

    if not hasattr(pynifgen, attribute_str):
        raise Exception('%s is not a valid attribute'% attribute_str)

    return eval('pynifgen.{:s}'.format(attribute_str))


def ParseError(vistatus):
    """
    Takes a vistatus code and raises an error or warning
    """
    
    err_str = b' '*300
    pynifgen.niFgen_GetError(None, ctypes.c_int32(vistatus), len(err_str), 
                             err_str)
    err_str = err_str.split(b'\x00')[0]

    if vistatus < 0 and pynifgen.raise_on_error:
        raise Exception(err_str)
        
    else:
        warnings.warn(err_str)


def FunctionFactory(include_path):
    """
    Gives functions in the niFgenlib a docstring and parses functions from 
    niFgen.h to a python friendly format.
    
    """
#    For example, this header info becomes:
#    vistatus _VI_FUNC  niFgen_InitWithOptions(
#       ViRsrc resourceName,
#       ViBoolean IDQuery,
#       ViBoolean resetDevice,
#       string optionstr,
#       ViSession *newVi);
#    
#    
#    niFgen_InitWithOptions(resourceName, IDQuery, resetDevice, optionstr,
#    newVi)
#        Autogenerated generated function from niFgen.h
#        
#        Parameters
#        ----------
#        resourceName : ViRsrc
#        IDQuery : ViBoolean
#        resetDevice : ViBoolean
#        optionString : str
#        *newVi : ViSession
#        
#        Returns
#        -------
#        vistatus
    
    niFgen_hfile = os.path.join(include_path, 'niFgen.h')
    vi_types  = ['ViReal64', None]#'ViAttr']
    vi_ctypes = ['c_double', 'c_uint32']
    
    # read entire file to memory
    include_file = open(niFgen_hfile) #Open niFgen.h file
    raw = include_file.read()
    include_file.close()
    
    en = 0
    func_list = []
    func_strings = []
    while True:
        idx = raw.find('_VI_FUNC', en)
        # break when no more functions
        if idx == -1:
            break
        st = idx + 8
        
        en = raw.find(')', st)
        
        func_string = raw[st:en]
        
        st_var = func_string.find('(')
        func_name = func_string[:st_var].strip() # ignore niFgen
        
        func_var = func_string[st_var + 1:]
        parameters = []
        variable_names = []
        func_parms = []
        for var in func_var.split(','):
            v = var.strip().split() # now in a [type, name] list
            variable_name = v[1].replace('*', '')
            if '[' in variable_name:
                variable_name = variable_name.split('[')[0]
            if variable_name == 'from':
                variable_name = '_from'
            variable_names.append(variable_name)
            parameters.append('    {:s}'.format(' : '.join(v[::-1])))
            
            #convert to proper type
            if '*' in v[1] or '*' in v[0]: # pointer
                func_parm = 'ctypes.byref({:s})'.format(variable_name)

            elif '[]' in v[1]: # array
                if 'Char' not in v[0]:
                    func_parm = '{:s}.ctypes'.format(variable_name)
                else:
                    func_parm = variable_name

            elif v[0] in vi_types and '*' not in v[1]:
                c_type = vi_ctypes[vi_types.index(v[0])]
                func_parm = 'ctypes.{:s}({:s})'.format(c_type, variable_name)

            elif 'ViConstString' in v[0]: # python3 unicode to string
                func_parm = "%s.encode('utf-8')"% variable_name

            else:
                func_parm = variable_name
            
            func_parms.append(func_parm)
            
        func_list.append(str.encode(func_name))
        
        # format paramter string
        func_string = """
def {0:s}({1:s}):
    \"""
    Autogenerated generated function from niFgen.h
    
    For additional help see:
    http://zone.ni.com/reference/en-XX/help/370524P-01/fgencref/nifgen_functions/
    
    Parameters
    ----------
{2:s}

    Returns
    -------
    vistatus
    
    \"""
    
    # call the actual function from the library
    vistatus = niFgenlib.{3:s}({4:s})
    
    # parse the error
    if vistatus:
        ParseError(vistatus)
    
    return vistatus
    
""".format(func_name, ', '.join(variable_names), '\n'.join(parameters),
           func_name, ', '.join(func_parms))
    
        func_strings.append(func_string)

    return func_list, func_strings


class PyViSession(object):
    """
    Class to simplify the creation and control of a ViSession.
    
    Though each function returns the status of a function call to the 
    underlying C library, errors are automatically handled with ParseError and
    errors are raised as Exceptions while warnings are issued as a python 
    warning.
    
    Set pynifgen.raise_on_error = False to raise NI-FGEN exceptions as warnings


    Parameters
    ----------
    resourceName : str
        	Specifies the resource name of the device to initialize.
    
    IDQuery : bool, optional
        Specifies whether you want NI-FGEN to perform an ID query.  Default
        True.
        
    resetDevice : bool, optional
        Specifies whether you want to reset the device during the 
        initialization procedure. If True, specifies that the device is
        reset and performs the same function as the reset function.  
        Default True
        
    optionString : str, optional
        Sets the initial value of certain session attributes.

    
    Examples
    --------
    Connect to "myDAQmxDevice"
    
    >>> visession = pynifgen.PyViSession('myDAQmxDevice')
    
    Create a simulated device
    
    >>> option = 'Simulate=1,DriverSetup=Model:5402;BoardType:PCI'
    >>> visession = pynifgen.InitWithOptions(resourceName, optionString=option)
    
    
    """
    
    def __init__(self, resourceName, IDQuery=True, resetDevice=True,
                 optionString=None):
        """
        Initializes object
        """
        
        # init session handle
        self.vi = ctypes.c_int()
        
        # initialize with options if there's an optionString
        if optionString:
            pynifgen.niFgen_InitWithOptions(resourceName, IDQuery, 
                                            resetDevice,
                                            optionString, 
                                            self.vi)

        else:
            pynifgen.niFgen_init(resourceName, IDQuery, resetDevice,
                                 self.vi)

        
    def ConfigureOperationMode(self, channelName="0"):
        """
        Determines how the signal generator produces waveforms. NI signal
        generators support only Continuous operation mode. To control trigger 
        mode, use the niFgen_ConfigureTriggerMode function.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to configure the 
            operation mode.  Defaults to "0"
            
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        """
        
        operationMode = pynifgen.NIFGEN_VAL_OPERATE_CONTINUOUS
        return pynifgen.niFgen_ConfigureOperationMode(self.vi, 
                                                      channelName, 
                                                      operationMode)
    
    
    def ConfigureOutputMode(self, outputMode):
        """
        Configures the output mode of the signal generator. The output mode 
        determines how the signal generator produces waveforms. For example, 
        you can select to generate a standard waveform, an arbitrary waveform,
        or a sequence of arbitrary waveforms.
        
        
        Parameters
        ----------
        outputMode : str
            Specifies the output mode that you want the signal generator to 
            use. Accepts the following strings:
                
            - 'NIFGEN_VAL_OUTPUT_FUNC'
            - 'NIFGEN_VAL_OUTPUT_FREQ_LIST'
            - 'NIFGEN_VAL_OUTPUT_ARB'
            - 'NIFGEN_VAL_OUTPUT_SEQ'
            - 'NIFGEN_VAL_OUTPUT_SCRIPT'
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureOutputMode(self.vi, 
                                                   EvalAttr(outputMode)) 


    def ConfigureChannels(self, channels):
        """
        Configures the channels to use with the instrument specified in the vi
        parameter. If you call this function, you must call it immediately 
        after initializing your session and before configuring attributes or 
        writing data.
        
        
        Parameters
        ----------
        channels : str
            Specifies the channel on which all subsequent channel-based 
            attributes in the session are set. Valid values are non-negative
            integers. For example, "0" is the only valid value on devices with
            one channel, while devices with two channels support values of 0
            and 1. You can specify more than one channel by inserting commas
            between values (for example, "0,1").
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureChannels(self.vi, channels)
    
        
    def ConfigureOutputEnabled(self, channelName='0', enabled=True):
        """
        Configures the signal generator to generate a signal at the channel 
        output connector.


        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0"
            
        enabled : bool, optional
            Specifies whether you want to enable or disable the output.  
            Defaults to True.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        
        return pynifgen.niFgen_ConfigureOutputEnabled(self.vi, channelName,
                                                      enabled)
    
    
    def ConfigureOutputImpedance(self, channelName='0', impedance=50):
        """
        Configures the output impedance for the channel you specify.


        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0"
            
        impedance: float, optional
            Specifies the impedance value that you want the signal generator to 
            use. Units are in ohms.  Default value is 50.
            
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureOutputImpedance(self.vi, 
                                                        channelName,
                                                        impedance)
        

    def EnableAnalogFilter(self, channelName='0', filterCorrectionFrequency=0):
        """
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0"
            
        filterCorrectionFrequency : float, optional
            Specifies the filter correction frequency of the analog filter. On 
            the NI 5411 and NI 5431, NI-FGEN adjusts signal amplitude to 
            compensate for the filter attenuation at that frequency. 
            To disable amplitude correction, set filterCorrectionFrequency to 
            0. For Standard Function output mode, filterCorrectionFrequency 
            typically should be set to the same value as the frequency of the 
            standard waveform.  
            Units are in Hertz and Default is 0.
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        vistatus = pynifgen.niFgen_EnableAnalogFilter(self.vi, channelName,
                                                      filterCorrectionFrequency)
        
        return vistatus
    
    
    def DisableAnalogFilter(self, channelName='0'):
        """
        Disables the analog filter. This function is valid in Arbitrary 
        Waveform, Arbitrary Sequence, and Script output modes. This function 
        can also be used in Standard Function and Frequency List output modes
        for user-defined waveforms.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0"
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_DisableAnalogFilter(self.vi, channelName)
    
    
    def EnableDigitalFilter(self, channelName='0'):
        """
        Enables the digital filter. The digital filter setting can be applied 
        in Arbitrary Waveform, Arbitrary Sequence, or Script output mode, or in
        Frequency List or Standard Function output mode when used with 
        user-defined functions.
        

        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0"
            
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_EnableDigitalFilter(self.vi, channelName)
        
        
    def EnableDigitalPatterning(self, channelName='0'):
        """
        Enables digital pattern output on the signal generator.
        

        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0"
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_EnableDigitalPatterning(self.vi, channelName)
    
    
    def DisableDigitalPatterning(self, channelName='0'):
        """
        Disables digital pattern output on the signal generator
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to disable digital 
            pattern output.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_DisableDigitalPatterning(self.vi, channelName)
        
        
    def ConfigureStandardWaveform(self, channelName='0', 
                                  waveform="NIFGEN_VAL_WFM_SINE",
                                  amplitude=0, dcOffset=0, 
                                  frequency=0, startPhase=0):
        """
        Configures the attributes of the signal generator that affect standard
        waveform generation.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to configure a
            standard waveform.

        
        waveform : str, optional
            Specifies the standard waveform that you want the signal generator 
            to produce.  Must be a string from one of the following:

            - "NIFGEN_VAL_WFM_SINE"
            - "NIFGEN_VAL_WFM_SQUARE"
            - "NIFGEN_VAL_WFM_TRIANGLE"
            - "NIFGEN_VAL_WFM_RAMP_UP"
            - "NIFGEN_VAL_WFM_RAMP_DOWN"
            - "NIFGEN_VAL_WFM_DC Constant"
            - "NIFGEN_VAL_WFM_NOISE"
            - "NIFGEN_VAL_WFM_USER"
                                             
        amplitude : float, optional
            Specifies the amplitude of the standard waveform that you want the
            signal generator to produce. This value is the amplitude at the
            output terminal.  Units in peak to peak volts.  Defaults to 0.
       
        dcOffset : float, optional
            Specifies the DC offset of the standard waveform that you want the
            signal generator to produce. This value is the offset at the output
            terminal. The value is the offset from ground to the center of the
            waveform you specify with the waveform parameter. For example, to
            configure a waveform with an amplitude of 10.00 V to range from 
            0.00 V to +10.00 V, set the dcOffset to 5.00
            Defaults to 0.
            
        frequency : float, optional
            Specifies the frequency of the standard waveform that you want the
            signal generator to produce.  Units in Hertz and defaults to 0.
            
        startPhase : float, optional
            Specifies the horizontal offset of the standard waveform that you 
            want the signal generator to produce. Specify this parameter in 
            degrees of one waveform cycle.  A start phase of 180 degrees means 
            output generation begins halfway through the waveform.  Default 
            0.
            
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        
        Example
        -------
        waveform = "NIFGEN_VAL_WFM_RAMP_DOWN"
        visession.ConfigureStandardWaveform("0", waveform)
        
        """
        func = pynifgen.niFgen_ConfigureStandardWaveform
        return func(self.vi,
                    channelName,
                    EvalAttr(waveform),
                    amplitude,
                    dcOffset,
                    frequency,
                    startPhase)
    
    
    def DefineUserStandardWaveform(self, channelName='0',
                                   waveformDataArray=None):
        """
        Defines a user waveform for use in either Standard Function or 
        Frequency List output mode.

        To select the waveform, set the waveform parameter to 
        "NIFGEN_VAL_WFM_USER" with either the ConfigureStandardWaveform or the
        CreateFreqList function.

        The waveform data must be scaled between -1.0 and 1.0. 
        Use the amplitude parameter in the ConfigureStandardWaveform function 
        to generate different output voltages.


        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0"
            
            
        waveformDataArray : np.ndarray
            Specifies the array of data you want to use for the new arbitrary 
            waveform.  Must be a one dimentional numpy array.
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_DefineUserStandardWaveform(self.vi,
                                                          channelName,
                                                          waveformDataArray)
    
    
    def ClearUserStandardWaveform(self, channelName='0'):
        """
        Clears the user-defined waveform created by the 
        DefineUserStandardWaveform function.
       
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0"
            
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ClearUserStandardWaveform(self.vi,
                                                         channelName)
        
        
    def ConfigureFrequency(self, channelName='0', frequency=None):
        """
        Configures the frequency of the standard waveform that you want the 
        signal generator to produce.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to configure a 
            standard waveform.
            
        frequency : float, optional
            Specifies the frequency of the standard waveform that you want the
            signal generator to produce.  Units in Hz and defaults to None.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        
        Notes
        -----
        This parameter does not affect signal generator behavior when 
        you set the waveform parameter of the niFgen_ConfigureStandardWaveform
        function to NIFGEN_VAL_WFM_DC.  Frequency ranges vary from device to 
        device.
        
        """
        return pynifgen.niFgen_ConfigureFrequency(self.vi, channelName, 
                                                  frequency)
    
    
    def ConfigureAmplitude(self, channelName='0', amplitude=None):
        """
        Configures the amplitude of the standard waveform that you want the 
        signal generator to produce.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to configure a 
            standard waveform.
        
        amplitude : float, optional
            Specifies the amplitude of the standard waveform that you want the 
            signal generator to produce. This value is the amplitude at the 
            output terminal.  Units in peak to peak voltage and defaults to
            None.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureAmplitude(self.vi, channelName,
                                                  amplitude)
    
    
    def CreateFreqList(self, waveform="NIFGEN_VAL_WFM_SINE", 
                       frequencyArray=None, durationArray=None):
        """
        Creates a frequency list from an array of frequencies (frequencyArray)
        and an array of durations (durationArray). The two arrays must have 
        the same number of elements, and this value must also be the size of 
        the frequencyListLength. The function returns a handle that identifies 
        the frequency list (the frequencyListHandle). You can pass this handle
        to niFgen_ConfigureFreqList to specify what frequency list you want the
        signal generator to produce.
        
        
        Parameters
        ----------
        waveform : str, optional
            Specifies the standard waveform that you want the signal generator 
            to produce.  Must be a string from one of the following:
                
            - "NIFGEN_VAL_WFM_SINE"
            - "NIFGEN_VAL_WFM_SQUARE"
            - "NIFGEN_VAL_WFM_TRIANGLE"
            - "NIFGEN_VAL_WFM_RAMP_UP"
            - "NIFGEN_VAL_WFM_RAMP_DOWN"
            - "NIFGEN_VAL_WFM_DC Constant"
            - "NIFGEN_VAL_WFM_NOISE"
            - "NIFGEN_VAL_WFM_USER"
                                             
             Defaults to "NIFGEN_VAL_WFM_SINE"
             
        frequencyArray : numpy.ndarray
            Specifies the array of frequencies to form the frequency list. The
            array must have at least as many elements as the value you specify 
            in the durationArray. Each frequencyArray element has a 
            corresponding durationArray element that indicates how long that 
            frequency is repeated.  Units in Hertz and default to None.
        
        durationArray : numpy.ndarray
            	Specifies the array of durations to form the frequency list. 
                The array must have at least as many elements as the value that
                you specify in frequencyArray. Each durationArray element has a
                corresponding frequencyArray element and indicates how long in
                seconds to generate the corresponding frequency.  Units in 
                seconds and defaults to None.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        frequencyListHandle : int
            The handle that identifies the new frequency list. You can pass 
            this handle to niFgen_ConfigureFreqList to generate the arbitrary 
            sequence.
        
            
        Example
        -------
        This example creates a frequency list that changes from 100 Hz to 1000
        Hz while decreasing the time spent at the high frequencies.
        
        # Setup the inputs
        >>> waveform = 'NIFGEN_VAL_WFM_SQUARE'
        >>> npart = 100
        >>> frequencyArray = np.linspace(100, 1000, npart))
        >>> durationArray  = np.linspace(0.01, 0.001, npart))
        
        # create the frequency list
        >>> visession.CreateFreqList(waveform, frequencyArray, durationArray)
        
        
        """
        # input check
        if frequencyArray.size != durationArray.size:
            raise Exception('frequencyArray length and durationArray ' +\
                            'length must match')
        
        frequencyListHandle = ctypes.c_int()
        vistatus = pynifgen.niFgen_CreateFreqList(self.vi, 
                                                  EvalAttr(waveform),
                                                  frequencyArray.size,
                                                  frequencyArray,
                                                  durationArray,
                                                  frequencyListHandle)
        
        return vistatus, frequencyListHandle
        
        
    def ConfigureFreqList(self, channelName='0', frequencyListHandle=None,
                          amplitude=1, dcOffset=0, startPhase=0):
        """
        Configures the attributes of the signal generator that affect frequency
        list generation.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0".
            
        frequencyListHandle : int, optional
            Specifies the handle of the frequency list that you want the signal
            generator to produce. You can create a frequency list using the 
            CreateFreqList function, which returns a handle that you use to
            identify the list.
        
        amplitude : float, optional
            Specifies the amplitude of the standard waveform that you want the
            signal generator to produce. This value is the amplitude at the
            output terminal.  Units in peak to peak volts.  Defaults to 1.
       
        dcOffset : float, optional
            Specifies the DC offset of the standard waveform that you want the
            signal generator to produce. This value is the offset at the output
            terminal. The value is the offset from ground to the center of the
            waveform you specify with the waveform parameter. For example, to
            configure a waveform with an amplitude of 10.00 V to range from 
            0.00 V to +10.00 V, set the dcOffset to 5.00.  Defaults to 0.
            
        startPhase : float, optional
            Specifies the horizontal offset of the standard waveform that you 
            want the signal generator to produce. Specify this parameter in 
            degrees of one waveform cycle.  A start phase of 180 degrees means 
            output generation begins halfway through the waveform.  Defaults to
            0.
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        
        Notes
        -----
        The signal generator must not be in the Generating state when you call
        this function.
        
        You must call ConfigureOutputMode to set the outputMode parameter to 
        NIFGEN_VAL_OUTPUT_FREQ_LIST before calling this function.
        
        """
        return pynifgen.niFgen_ConfigureFreqList(self.vi,
                                                 channelName,
                                                 frequencyListHandle,
                                                 amplitude,
                                                 dcOffset,
                                                 startPhase)
    
    
    def ClearFreqList(self, frequencyListHandle):
        """
        Removes a previously created frequency list from the signal generator 
        memory and invalidates the frequency list handle.
        
        
        Parameters
        ----------
        frequencyListHandle : int, optional
            Specifies the handle of the frequency list that you want the signal
            generator to clear.
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        """
        return pynifgen.niFgen_ClearFreqList(self.vi, frequencyListHandle)
    
    
    def QueryFreqListCapabilities(self):
        """
        Returns the attributes of the signal generator that are related to 
        creating frequency lists. 
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        maximumNumberOfFreqLists : int
            The maximum number of frequency lists that the signal generator
            allows.
        
        minimumFrequencyListLength : int
             The minimum number of steps that the signal generator allows in a 
             frequency list.
             
        maximumFrequencyListLength : int
             The maximum number of steps that the signal generator allows in a
             frequency list
             
        minimumFrequencyListDuration : float
            The minimum duration that the signal generator allows in a step of
            a frequency list.
            
        maximumFrequencyListDuration : float
            The maximum duration that the signal generator allows in a step of 
            a frequency list.
            
        frequencyListDurationQuantum : float
            The quantum of which all durations must be a multiple in a 
            frequency list. 
        
        """
        maximumNumberOfFreqLists = ctypes.c_int32()
        minimumFrequencyListLength = ctypes.c_int32()
        maximumFrequencyListLength = ctypes.c_int32()
        minimumFrequencyListDuration = ctypes.c_double()
        maximumFrequencyListDuration = ctypes.c_double()
        frequencyListDurationQuantum = ctypes.c_double()
        
        query = pynifgen.niFgen_QueryFreqListCapabilities
        vistatus = query(self.vi, 
                         maximumNumberOfFreqLists,
                         minimumFrequencyListLength,
                         maximumFrequencyListLength,
                         minimumFrequencyListDuration, 
                         maximumFrequencyListDuration, 
                         frequencyListDurationQuantum)

        return (vistatus, 
                maximumNumberOfFreqLists.value,
                minimumFrequencyListLength.value,
                maximumFrequencyListLength.value,
                minimumFrequencyListDuration.value, 
                maximumFrequencyListDuration.value,
                frequencyListDurationQuantum.value)
        
        
    def ConfigureGain(self, channelName='0', gain=None):
        """
        Configures the amount of gain to apply to the waveform.


        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to enable the output.
            Defaults to "0".
            
        gain : float
            Specifies the factor by which the signal generator scales the 
            arbitrary waveforms in the sequence. When you create an arbitrary
            waveform, you must first normalize the data points to a range of
            -1.00 to +1.00. You can use this parameter to scale the waveform to
            other ranges. The gain is applied before the offset is added.

            For example, to configure the output signal to range from -2.00 to
            +2.00 V, set gain to 2.00.  Unitless.

            
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        
        Notes
        -----
        Notes  The signal generator must not be in the Generating state when
        you call this function.
        
        You must call the niFgen_ConfigureOutputMode function to set the 
        outputMode parameter to NIFGEN_VAL_OUTPUT_ARB before calling this 
        function.
        
        """
        return pynifgen.niFgen_ConfigureGain(self.vi, channelName, gain)
    
    
    def ConfigureSampleRate(self, sampleRate):
        """
        Configures the NIFGEN_ATTR_ARB_SAMPLE_RATE attribute, which determines 
        the rate at which the signal generator produces arbitrary waveforms.
        When you configure the signal generator to produce an arbitrary
        sequence, this value is the sample rate for all arbitrary waveforms in 
        the sequence.


        Parameters
        ----------
        sampleRate : float
            The sample rate at which you want the signal generator to generate 
            arbitrary waveforms.  Units are in samples/s.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureSampleRate(self.vi, sampleRate)
    
    
    def QueryArbWfmCapabilities(self):
        """
        Returns the attributes of the signal generator that are related to 
        creating arbitrary waveforms. These attributes are the maximum number
        of waveforms, waveform quantum, minimum waveform size, and maximum 
        waveform size.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        maximumNumberofWaveforms : int
            The maximum number of arbitrary waveforms that the signal generator
            allows. 
        
        waveformQuantum : int
             The size (number of points) of each waveform must be a multiple of
             a constant quantum value. This parameter obtains the quantum value
             that the signal generator uses.  For example, when this attribute
             returns a value of 8, all waveform sizes must be a multiple of 8.
             
        minimumWaveformSize : int
             The minimum number of points that the signal generator allows in a
             waveform.
             
        maximumWaveformSize : int
             The maximum number of points that the signal generator allows in a
             waveform.
                
        """
        maximumNumberofWaveforms = ctypes.c_int32()
        waveformQuantum = ctypes.c_int32()
        minimumWaveformSize = ctypes.c_int32()
        maximumWaveformSize = ctypes.c_int32()
        
        query = pynifgen.niFgen_QueryArbWfmCapabilities
        vistatus = query(self.vi, 
                         maximumNumberofWaveforms,
                         waveformQuantum,
                         minimumWaveformSize,
                         maximumWaveformSize)

        return (vistatus, 
                maximumNumberofWaveforms.value,
                waveformQuantum.value,
                minimumWaveformSize.value, 
                maximumWaveformSize.value)
        
        
    def CreateWaveformF64(self, channelName="0", waveformDataArray=None):
        """
        Creates an onboard waveform from binary F64 (floating point double) 
        data for use in Arbitrary Waveform output mode or Arbitrary Sequence
        output mode. The waveformHandle returned can later be used for setting
        the active waveform, changing the data in the waveform, building 
        sequences of waveforms, or deleting the waveform when it is no longer 
        needed.
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"
            
        waveformDataArray : double np.ndarray
            The array of data you want to use for the new arbitrary waveform. 
            
            You must normalize the data points in the array to be between 
            -1.00 and +1.00.
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        waveformHandle : int
            	The handle that identifies the new waveform.  This handle is used 
                later when referring to this waveform.
                
        Notes
        -----
        You must call the niFgen_ConfigureOutputMode function to set 
        the outputMode parameter to NIFGEN_VAL_OUTPUT_ARB or 
        NIFGEN_VAL_OUTPUT_SEQ before calling this function.
        
        """
        # Make a handle to the waveform data        
        waveformHandle = ctypes.c_int32()
        vistatus = pynifgen.niFgen_CreateWaveformF64(self.vi, channelName, 
                                                      waveformDataArray.size,
                                                      waveformDataArray, 
                                                      waveformHandle)
        
        return vistatus, waveformHandle.value
    
    
    def CreateWaveformI16(self, channelName="0", waveformDataArray=None):
        """
        Creates an onboard waveform from binary 16-bit signed integer (I16) 
        data for use in Arbitrary Waveform or Arbitrary Sequence output mode.
        The waveformHandle returned can later be used for setting the active 
        waveform, changing the data in the waveform, building sequences of 
        waveforms, or deleting the waveform when it is no longer needed.
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"
            
        waveformDataArray : int16 np.ndarray 
            The array of data you want to use for the new arbitrary waveform. 
            
            You must normalize the data points in the array to be between 
            -1.00 and +1.00.
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        waveformHandle : int
            	The handle that identifies the new waveform.  This handle is used 
                later when referring to this waveform.
                
        Notes
        -----
        You must call the niFgen_ConfigureOutputMode function to set 
        the outputMode parameter to NIFGEN_VAL_OUTPUT_ARB or 
        NIFGEN_VAL_OUTPUT_SEQ before calling this function.
        
        """
        # Make a handle to the waveform data        
        waveformHandle = ctypes.c_uint()
        vistatus = pynifgen.niFgen_CreateWaveformI16(self.vi, channelName, 
                                                      waveformDataArray.size,
                                                      waveformDataArray, 
                                                      waveformHandle)
        
        return vistatus, waveformHandle
    
    
    def CreateWaveformComplexF64(self, channelName="0", 
                                        waveformDataArray=None):
        """
        Creates an onboard waveform from complex double-precision 
        floating-point (F64) data for use with the NIFGEN_ATTR_OUTPUT_MODE 
        attribute set to Arbitrary Waveform or Arbitrary Sequence output mode 
        on devices with the NIFGEN_ATTR_OUTPUT_ENABLED attribute set to 
        VI_TRUE and the NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE attribute set to
        NIFGEN_VAL_OSP_COMPLEX. The waveformHandle returned by the function 
        can be used later for setting the active waveform, changing the data 
        in the waveform, building sequences of waveforms, or deleting the 
        waveform when it is no longer 
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"
            
        waveformDataArray : double np.ndarray 
            The array of data you want to use for the new arbitrary waveform. 
            
            You must normalize the data points in the array to be between 
            -1.00 and +1.00.
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        waveformHandle : int
            	The handle that identifies the new waveform.  This handle is used 
                later when referring to this waveform.
                
        Notes
        -----
        You must call the niFgen_ConfigureOutputMode function to set 
        the outputMode parameter to NIFGEN_VAL_OUTPUT_ARB or 
        NIFGEN_VAL_OUTPUT_SEQ before calling this function.
        
        """
        # Make a handle to the waveform data        
        waveformHandle = ctypes.c_int32()
        vistatus = pynifgen.niFgen_CreateWaveformComplexF64(self.vi, 
                                                            channelName, 
                                                            waveformDataArray.size,
                                                            waveformDataArray, 
                                                            waveformHandle)
        
        return vistatus, waveformHandle
    
    
    
    def CreateWaveformFromFileI16(self, channelName="0", filename=None,
                                  byteOrder='NIFGEN_VAL_LITTLE_ENDIAN'):
        """
        Takes the binary 16-bit signed integer (I16) data from the specified 
        file and creates an onboard waveform for use in Arbitrary Waveform or 
        Arbitrary Sequence output mode. The waveformHandle returned by this 
        function can later be used for setting the active waveform, changing 
        the data in the waveform, building sequences of waveforms, or deleting 
        the waveform when it is no longer needed.
        
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"
            
        fileName : str
            The full path and name of the file where the waveform data resides.
            
        byteOrder : str
            Specifies the byte order of the data in the file.  Must be

            - 'NIFGEN_VAL_LITTLE_ENDIAN'
            - 'NIFGEN_VAL_BIG_ENDIAN'
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        waveformHandle : int
            The handle that identifies the new waveform. This handle is used 
            later when referring to this waveform.
        
        
        Notes
        -----
        I16 data (values between -32768 and +32767) must be between -1.0 and 
        +1.0 V. Use the NIFGEN_ATTR_DIGITAL_GAIN attribute to generate 
        different voltage outputs.
        
        You must call the ConfigureOutputMode function to set the 
        outputMode parameter to NIFGEN_VAL_OUTPUT_ARB or NIFGEN_VAL_OUTPUT_SEQ
        before calling this function.
        
        """
        waveformHandle = ctypes.c_uint()
        vistatus = pynifgen.niFgen_CreateWaveformFromFileI16(self.vi,
                                                             channelName,
                                                             filename,
                                                             EvalAttr(byteOrder),
                                                             waveformHandle)
        
        return vistatus, waveformHandle
        
        
    def CreateWaveformFromFileF64(self, channelName="0", filename=None,
                                         byteOrder='NIFGEN_VAL_LITTLE_ENDIAN'):
        """
        Takes the floating point double (F64) data from the specified 
        file and creates an onboard waveform for use in Arbitrary Waveform or 
        Arbitrary Sequence output mode. The waveformHandle returned by this 
        function can later be used for setting the active waveform, changing 
        the data in the waveform, building sequences of waveforms, or deleting 
        the waveform when it is no longer needed.
        
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"
            
        fileName : str
            The full path and name of the file where the waveform data resides.
            
        byteOrder : str
            Specifies the byte order of the data in the file.  Must be
            'NIFGEN_VAL_LITTLE_ENDIAN' or 'NIFGEN_VAL_BIG_ENDIAN'
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        waveformHandle : int
            The handle that identifies the new waveform. This handle is used 
            later when referring to this waveform.
            
            
        Notes
        -----
        Notes   The F64 data must be between -1.0 and +1.0 V. Use the 
        NIFGEN_ATTR_DIGITAL_GAIN attribute to generate different voltage 
        outputs.
        
        You must call the ConfigureOutputMode function to set the 
        outputMode parameter to NIFGEN_VAL_OUTPUT_ARB or NIFGEN_VAL_OUTPUT_SEQ
        before calling this function.
        
        """
        waveformHandle = ctypes.c_uint()
        vistatus = pynifgen.niFgen_CreateWaveformFromFileF64(self.vi,
                                                             channelName,
                                                             filename,
                                                             EvalAttr(byteOrder),
                                                             waveformHandle)
        
        return vistatus, waveformHandle
    
    
    def CreateWaveformFromFileHWS(self, channelName="0", filename=None,
                                  useRateFromWaveform=True,
                                  useGainOffsetFromWaveform=True):
        """
        Takes the waveform data from the specified HWS (Hierarchical Waveform 
        Storage) file and creates an onboard waveform for use in Arbitrary 
        Waveform or Arbitrary Sequence output mode. The waveformHandle returned
        by this function can be used later for setting the active waveform, 
        changing the data in the waveform, building sequences of waveforms, or
        deleting the waveform when it is no longer needed. 

        When the Analog Waveform Editor saves data in an HWS file, it also 
        stores the rate, gain, and offset with the data. If the 
        useRateFromWaveform and useGain&OffsetFromWaveform parameters are set 
        to VI_TRUE, this function also sets those properties.
        
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"
            
        fileName : str
            The full path and name of the file where the waveform data resides.
          
        useRateFromWaveform : bool, optional
            If you set this parameter input to True and if onboard signal
            processing (OSP) is enabled, the 'rate' from the waveform is 
            interpreted as the data rate, and FGEN sets the data rate 
            attribute for you. In all other cases, it is interpreted as the 
            sample rate, and FGEN sets the sample rate attribute for you. 
            Defaults to True.
            
        useGainOffsetFromWaveform : bool, optional
            If this input is set to True, NI-FGEN retrieves the gain and offset
            values from the specified HWS file and applies them to the NI-FGEN
            driver.  Defaults to True.
            
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        waveformHandle : int
            The handle that identifies the new waveform. This handle is used 
            later when referring to this waveform.
        
        
        Notes
        -----
        Notes  If you choose to have this function set the gain and offset 
        properties for you, you should not use the ConfigureArbWaveform
        or ConfigureArbSequence functions, as they also set the gain 
        and offset, thereby overriding the values set by this function. Instead
        , use the NIFGEN_ATTR_ARB_WAVEFORM_HANDLE or 
        NIFGEN_ATTR_ARB_SEQUENCE_HANDLE attributes.
        
        HWS files may contain I16 or DBL data (depending on how it was saved). 
        This function automatically adapts to either data type. If the file 
        contains DBL data, it must be between -1.0 and +1.0. Check the 
        "Scale Data to +/- 1V" option in the Analog Waveform Editor to ensure
        your data is between -1.0 and +1.0.
        
        """
        # waveform reference
        waveformHandle = ctypes.c_uint()
        waveformHandle_ptr = ctypes.byref(waveformHandle)
        vistatus = pynifgen.niFgen_CreateWaveformFromFileHWS(self.vi,
                                                             channelName,
                                                             filename,
                                                             useRateFromWaveform,
                                                             useGainOffsetFromWaveform,
                                                             waveformHandle_ptr)
        
        return vistatus, waveformHandle
    
    
    def ConfigureArbWaveform(self, channelName='0', waveformHandle=None,
                             gain=None, offset=None):
        """
        Configures the attributes of the signal generator that affect arbitrary
        waveform generation
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"
            
        waveformHandle : int
            The handle of the arbitrary waveform you want the signal generator 
            to produce.  Defaults to None.
            
        gain : float, optional
            Specifies the factor by which the signal generator scales the 
            arbitrary waveforms in the sequence. When you create an arbitrary
            waveform, you must first normalize the data points to a range of 
            -1.00 to +1.00. You can use this parameter to scale the waveform 
            to other ranges. The gain is applied before the offset is added.
            
            For example, to configure the output signal to range from -2.00 to
            +2.00 V, set gain to 2.00.
            
            Defaults to None.
            
        offset : float, optional
            Specifies the value the signal generator adds to the arbitrary
            waveform data. When you create arbitrary waveforms, you must first
            normalize the data points to a range of -1.00 to +1.00 V. You can 
            use this parameter to shift the range of the arbitrary waveform. 

            For example, to configure the output signal to range from 0.00 to 
            2.00 V instead of -1.00 to 1.00 V, set the offset to 1.00.
            
            Defaults to None.  Units Volts.
            
            
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureArbWaveform(self.vi,
                                                    channelName,
                                                    waveformHandle,
                                                    gain,
                                                    offset)
        
        
    def ClearArbWaveform(self, waveformHandle=None):
        """
        Removes a previously created arbitrary waveform from the signal 
        generator memory and invalidates the waveform handle.
        
        
        Parameters
        ----------
        waveformHandle : int, optional
            The handle of the arbitrary waveform you want to remove.  
            By default clears all waveforms.
            
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        if not waveformHandle:
            waveformHandle = pynifgen.NIFGEN_VAL_ALL_WAVEFORMS

        vistatus = pynifgen.niFgen_ClearArbWaveform(self.vi,
                                                    waveformHandle)
        
        return vistatus
    
    
    def QueryArbSeqCapabilities(self):
        """
        Returns the attributes of the signal generator that are related to 
        creating arbitrary sequences.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        ----------
        vistatus : int
            Status code of this operation
            
        maximumNumberofSequences : int
            The maximum number of arbitrary waveform sequences that the signal
            generator allows
        
        minimumSequenceLength : int
            The minimum number of arbitrary waveforms the signal generator 
            allows in a sequence
             
        maximumFrequencyListLength : int
            The maximum number of arbitrary waveforms the signal generator 
            allows in a sequence.
             
        minimumFrequencyListDuration : int
            The maximum number of times the signal generator can repeat an 
            arbitrary waveform in a sequence
            
        
        """
        maximumNumberofSequences = ctypes.c_int32()
        minimumSequenceLength = ctypes.c_int32()
        maximumSequenceLength = ctypes.c_int32()
        minimumFrequencyListDuration = ctypes.c_int32()
        
        query = pynifgen.niFgen_QueryArbSeqCapabilities
        vistatus = query(self.vi,
                         maximumNumberofSequences,
                         minimumSequenceLength,
                         maximumSequenceLength,
                         minimumFrequencyListDuration)
        
        return (vistatus, 
                maximumNumberofSequences.value,
                minimumSequenceLength.value,
                maximumSequenceLength.value,
                minimumFrequencyListDuration.value)                
                
        
    def CreateArbSequence(self, waveformHandlesArray, loopCountsArray):
        """
        Creates an arbitrary sequence from an array of waveform handles and an 
        array of corresponding loop counts. This function returns a handle 
        that identifies the sequence. You pass this handle to the 
        ConfigureArbSequence function to specify what arbitrary sequence you 
        want the signal generator to produce.
        
        
        Parameters
        ----------
        waveformHandlesArray : np.ndarray
            Specifies the array of waveform handles from which you want to 
            create a new arbitrary sequence. The array must have at least as 
            many elements as the value that you specify in sequenceLength. 

            Each waveformHandlesArray element has a corresponding 
            loopCountsArray element that indicates how many times that 
            waveform is repeated. You obtain waveform handles when you create
            arbitrary waveforms with the AllocateWaveform function or 
            one of the following niFgen CreateWaveform functions:

            - CreateWaveformF64
            - CreateWaveformI16
            - CreateWaveformFromFileI16
            - CreateWaveformFromFileF64
            - CreateWaveformFromFileHWS
        
        loopCountsArray : np.ndarray
            Specifies the array of loop counts you want to use to create a new
            arbitrary sequence. The array must have at least as many elements 
            as the value that you specify in the sequenceLength parameter. Each
            loopCountsArray element corresponds to a waveformHandlesArray 
            element and indicates how many times to repeat that waveform. Each
            element of the loopCountsArray must be less than or equal to the 
            maximum number of loop counts that the signal generator allows. You
            can obtain the maximum loop count from maximumLoopCount in the 
            QueryArbSeqCapabilities function.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
            
        Notes
        -----
        You must call the ConfigureOutputMode function to set the outputMode 
        parameter to NIFGEN_VAL_OUTPUT_SEQ before calling this function.
        
        An arbitrary sequence consists of multiple waveforms. For each 
        waveform, you can specify the number of times that the signal 
        generator produces the waveform before proceeding to the next waveform.
        The number of times to repeat a specific waveform is called the loop 
        count.
        
        """
        if type(waveformHandlesArray) is list:
            waveformHandlesArray = np.asarray(waveformHandlesArray)
        
        if type(loopCountsArray) is list:
            loopCountsArray = np.asarray(loopCountsArray)
        
        if waveformHandlesArray.size != loopCountsArray.size:
            raise Exception('waveformHandlesArray and loopCountsArray ' +\
                            'lengths do not match')
        
        
        # create handle
        sequenceHandle = ctypes.c_int()
        sequenceLength = waveformHandlesArray.size
        vistatus = pynifgen.niFgen_CreateArbSequence(self.vi,
                                                     sequenceLength,
                                                     waveformHandlesArray,
                                                     loopCountsArray,
                                                     sequenceHandle)
        
        return vistatus, sequenceHandle
    
    
    def CreateAdvancedArbSequence(self, waveformHandlesArray, loopCountsArray,
                                  sampleCountsArray, markerLocationArray=None):
        """
        Creates an arbitrary sequence from an array of waveform handles and an 
        array of corresponding loop counts. This function returns a handle that
        identifies the sequence. You pass this handle to the 
        ConfigureArbSequence function to specify what arbitrary sequence you
        want the signal generator to produce.

        This extends on the niFgen_CreateArbSequence function by adding the
        ability to set the number of samples in each sequence step and to set 
        marker locations.
        
        Parameters
        ----------
        waveformHandlesArray : numpy.ndarray
            The array of waveform handles from which you want to create a new 
            arbitrary sequence. Each waveformHandlesArray element has a 
            corresponding loopCountsArray element that indicates how many times
            that waveform is repeated.
            
        loopCountsArray : numpy.ndarray
            The array of loop counts you want to use to create a new
            arbitrary sequence. Each loopCountsArray element corresponds to a
            waveformHandlesArray element and indicates how many times to repeat
            that waveform. Each element of the loopCountsArray must be less 
            than or equal to the maximum number of loop counts that the signal 
            generator allows. You can obtain the maximum loop count from 
            maximumLoopCount in the QueryArbSeqCapabilities function.
            
        sampleCountsArray : numpy.ndarray
            The array of sample counts that you want to use to create
            a new arbitrary sequence. Each sampleCountsArray element 
            corresponds to a waveformHandlesArray element and indicates the
            subset, in samples, of the given waveform to generate. Each element
            of the sampleCountsArray must be larger than the minimum waveform
            size, a multiple of the waveform quantum and no larger than the
            number of samples in the corresponding waveform. You can obtain 
            these values by calling the niFgen_QueryArbWfmCapabilities 
            function.
        
        markerLocationArray : numpy.ndarray
            The array of marker locations to where you want a marker
            to be generated in the sequence. Each markerLocationArray element 
            corresponds to a waveformHandlesArray element and indicates where 
            in the waveform a marker is to generate. The marker location must 
            be less than the size of the waveform the marker is in. The markers
            are coerced to the nearest marker quantum and the coerced values 
            are returned in the coercedMarkersArray parameter.
            
            If you do not want a marker generated for a particular sequence 
            stage, leave this parameter at it default, None

        Returns
        -------
        vistatus : int
            Status code of this operation
            
        coercedMarkers : numpy.ndarray
            An array of all given markers that are coerced (rounded) to the
            nearest marker quantum. Not all devices coerce markers.
        
        sequenceHandle : int
             The handle that identifies the new arbitrary sequence. You can 
             pass this handle to niFgen_ConfigureArbSequence to generate the 
             arbitrary sequence.
        
        """
        # replace markerLocationArray with no marker int
        if markerLocationArray is None:
            markerLocationArray = pynifgen.NIFGEN_VAL_NO_MARKER
        
        coercedMarkersArray = np.zeros_like(waveformHandlesArray)
        
        sequenceHandle = ctypes.c_int()
        sequenceLength = waveformHandlesArray.size
        vistatus = pynifgen.niFgen_CreateAdvancedArbSequence(self.vi,
                                                             sequenceLength,
                                                             waveformHandlesArray,
                                                             loopCountsArray,
                                                             sampleCountsArray, 
                                                             markerLocationArray,
                                                             coercedMarkersArray,
                                                             sequenceHandle)
        

        
        return vistatus, coercedMarkersArray, sequenceHandle
    
    
    def ConfigureArbSequence(self, channelName="0", sequenceHandle=None, 
                             gain=None, 
                             offset=None):
        """
        Configures the signal generator attributes that affect arbitrary 
        sequence generation
        
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"
                        
        sequenceHandle : int
             Specifies the handle of the arbitrary sequence that you want the 
             signal generator to produce
        
        gain : float
            Specifies the factor by which the signal generator scales the 
            arbitrary waveforms in the sequence. When you create an arbitrary
            waveform, you must first normalize the data points to a range of
            -1.00 to +1.00. You can use this parameter to scale the waveform to
            other ranges. The gain is applied before the offset is added.

            For example, to configure the output signal to range from -2.00 to
            +2.00 V, set gain to 2.00.  Unitless.
        
        offset : float, optional
            Specifies the value the signal generator adds to the arbitrary
            waveform data. When you create arbitrary waveforms, you must first
            normalize the data points to a range of -1.00 to +1.00 V. You can 
            use this parameter to shift the range of the arbitrary waveform. 

            For example, to configure the output signal to range from 0.00 to 
            2.00 V instead of -1.00 to 1.00 V, set the offset to 1.00.
            
            Defaults to None.  Units Volts.
            
        Returns
        -------
        vistatus : int
            Status code of this operation
            

        """
        return pynifgen.niFgen_ConfigureArbSequence(self.vi, channelName,
                                                    sequenceHandle,
                                                    gain,
                                                    offset)
    
    
    def ClearArbSequence(self, sequenceHandle=None):
        """
        Removes a previously created arbitrary sequence from the signal 
        generator memory and invalidates the sequence handle.
        
        Parameters
        ----------
        seqHandle : int
             The handle of the arbitrary sequence that you want to clear.  
             By default, this resets all sequences
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        if sequenceHandle is None:
            sequenceHandle = pynifgen.NIFGEN_VAL_ALL_SEQUENCES
            
        return pynifgen.niFgen_ClearArbSequence(self.vi, 
                                                sequenceHandle)
    
    
    def ClearArbMemory(self):
        """
        Removes all previously created arbitrary waveforms, sequences, and 
        scripts from the signal generator memory and invalidates all waveform 
        handles, sequence handles, and waveform names.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ClearArbMemory(self.vi)
    
    
    def AllocateWaveform(self, channelName="0", waveformSize=None):
        """
        Specifies the size of a waveform so that it can be allocated in onboard
        memory before loading the associated data. Data can then be loaded in 
        smaller blocks with the Write Binary 16 Waveform functions.
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to allocate the waveform.

        waveformSize : int
            Specifies, in samples, the size of the waveform to allocate.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        waveformHandle : int
            The handle that identifies the new waveform. This handle is used 
            later when referring to this waveform.

        
        Notes
        -----
        Notes  The signal generator must not be in the Generating state when 
        you call this function.
        
        You must call the niFgen_ConfigureOutputMode function to set the 
        outputMode parameter to NIFGEN_VAL_OUTPUT_SEQ before calling this 
        function.
        
        """
        waveformHandle = ctypes.c_int()
        vistatus = pynifgen.niFgen_AllocateWaveform(self.vi, channelName, 
                                                    waveformSize, 
                                                    waveformHandle)
        
        return vistatus, waveformHandle
    
    
    def SetWaveformNextWritePosition(self, channelName="0", 
                                     waveformHandle=None, 
                                     relativeTo=None, offset=None):
        """
        Sets the position in the waveform at which the next waveform data is 
        written. This function allows you to write to arbitrary locations 
        within the waveform. These settings apply only to the next write to the
        waveform specified by the waveformHandle parameter. Subsequent writes 
        to that waveform begin where the last write left off, unless this 
        function is called again. The waveformHandle passed in must have been 
        created by a call to the AllocateWaveform function or one of the 
        following functions:
            
        - CreateWaveformF64
        - CreateWaveformI16
        - CreateWaveformFromFileI16
        - CreateWaveformFromFileF64
        - CreateWaveformFromFileHWS
        
        Parameters
        ----------
        channelName : str, optional
            The channel on which to the waveform data should be loaded.
            
        waveformHandle : int
            The handle of the arbitrary waveform previously allocated with the 
            niFgen_AllocateWaveform function.
            
        relativeTo : str
            The reference position in the waveform. This position and offset 
            together determine where to start loading data into the waveform.
            Allowable values:
                
            "NIFGEN_VAL_WAVEFORM_POSITION_START"
                Use the start of the waveform as the reference position.
        
            "NIFGEN_VAL_WAVEFORM_POSITION_CURRENT"
                Use the current position within the waveform as the reference 
                position.
        
        offset : int
            The offset from relativeTo at which to start loading the data into
            the waveform.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SetWaveformNextWritePosition(self.vi, 
                                                            channelName, 
                                                            waveformHandle,
                                                            EvalAttr(relativeTo), 
                                                            offset)
        
    
    def WriteWaveform(self, channelName="0", waveformHandle=None, 
                      data=None):
        """
        Writes floating-point data to the waveform in onboard memory. The 
        waveform handle passed in must have been created by a call to the 
        AllocateWaveform function or one of the following functions:
            
        - CreateWaveformF64
        - CreateWaveformI16
        - CreateWaveformFromFileI16
        - CreateWaveformFromFileF64
        - CreateWaveformFromFileHWS
                
            
        Parameters
        ----------
        channelName : str, optional
            The channel onto which the waveform data should be loaded.
            
        waveformHandle : int
            Specifies the handle of the arbitrary waveform previously allocated
            with the AllocateWaveform function.

        data : np.array
            The array of data to load into the waveform
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteWaveform(self.vi,channelName, 
                                             waveformHandle, 
                                             data.size, 
                                             data)
    
    
    def WriteWaveformComplexF64(self, channelName="0", data=None, 
                                waveformHandle=None,):
        """
        Write Waveform Complex F64
        
        Writes floating-point data to the waveform in onboard memory. The 
        waveform handle passed in must have been created by a call to the 
        AllocateWaveform function or one of the following functions:

        - CreateWaveformF64
        - CreateWaveformI16
        - CreateWaveformFromFileI16
        - CreateWaveformFromFileF64
        - CreateWaveformFromFileHWS
                
            
        Parameters
        ----------
        channelName : str, optional
            The channel onto which the waveform data should be loaded.
            
        data : np.array
            The array of data to load into the waveform.

        waveformHandle : int
            Specifies the handle of the arbitrary waveform previously allocated
            with the AllocateWaveform function.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteWaveformComplexF64(self.vi,
                                                       channelName, 
                                                       data.size, 
                                                       data,
                                                       waveformHandle)


    def WriteBinary16Waveform(self, channelName="0", waveformHandle=None, 
                              data=None):
        """
        Writes binary data to the waveform in onboard memory. The waveform 
        handle passed in must have been created by a call to the 
        AllocateWaveform or the CreateWaveformI16 function.

        By default, the subsequent call to the WriteBinary16Waveform function 
        continues writing data from the position of the last sample written. 
        You can set the write position and offset by calling the 
        SetWaveformNextWritePosition function. If streaming is enabled, you can
        write more data than the allocated waveform size in onboard memory. 
        
        Parameters
        ----------
        channelName : str, optional
            The channel onto which the waveform data should be loaded.

        waveformHandle : int
            Specifies the handle of the arbitrary waveform previously allocated
            with the AllocateWaveform function.

        data : numpy.ndarray
            Specifies the array of data to load into the waveform.  
            The binary data is left-justified.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteBinary16Waveform(self.vi, channelName,
                                                     waveformHandle,
                                                     data.size)


    def WriteComplexBinary16Waveform(self, channelName, waveformHandle, 
                                     data):
        """
        Writes binary data to the waveform in onboard memory. The waveform 
        handle passed in must have been created by a call to the 
        AllocateWaveform or the CreateWaveformI16 function.

        By default, the subsequent call to the WriteComplexBinary16Waveform 
        function  continues writing data from the position of the last sample 
        written.  You can set the write position and offset by calling the 
        SetWaveformNextWritePosition function. If streaming is enabled, you can
        write more data than the allocated waveform size in onboard memory. 
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"

        waveformHandle : int
            Specifies the handle of the arbitrary waveform previously allocated
            with the AllocateWaveform function.

        data : numpy.ndarray
            Specifies the array of data to load into the waveform.  
            The binary data is left-justified.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteComplexBinary16Waveform(self.vi, 
                                                            channelName, 
                                                            waveformHandle,
                                                            data.size, 
                                                            data)


    def ConfigureReferenceClock(self, referenceClockSource="None", 
                                referenceClockFrequency=10000000):
        """
        Configures the signal generator Reference clock source and frequency. 
        The signal generator uses the Reference clock to tune the Sample clock
        timebase of the signal generator so that the frequency stability and 
        accuracy of the Sample clock timebase matches that of the Reference 
        clock.
        
        
        Parameters
        ----------
        referenceClockSource : str, optional
            Specifies the source for the Reference clock. For example, when you
            set this parameter to "ClkIn," the signal generator uses the signal
            it receives at its CLK IN front panel connector as the Reference 
            clock. The Reference clock phase-locks with the signal generator 
            Sample clock timebase to allow the frequency stability and accuracy
            of the Sample clock timebase to match that of the Reference clock.
            
            Allowable values:
                
            - "None"          No Reference clock (default)
            - "PXI_Clk10"     10 MHz backplane Reference clock
            - "ClkIn"         CLK IN front panel connector
            - "OnboardRefClk"	Onboard Reference clock
            - "RTSI7"	        RTSI line 7
            - "RefIn"	        REF IN front panel connector

        referenceClockFrequency : double, optional
            The Reference clock frequency in hertz.  Default 10000000
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        
        Notes
        -----
        Note   The above allowable values are examples of possible Reference
        clock sources. For a complete list of the Reference clock sources 
        available on your device, refer to the Device Routes tab in MAX.
        
        """
        return pynifgen.niFgen_ConfigureReferenceClock(self.vi, 
                                                       referenceClockSource,
                                                       referenceClockFrequency)


    def ConfigureSampleClockSource(self, sampleClockSource="OnboardClock"):
        """
        Sets the source of the Sample clock (update clock) of the signal 
        generator.

        
        Parameters
        ----------
        sampleClockSource : str
            Specifies the Sample clock source the signal generator uses.
            Allowable values:
            
            - "OnboardClock"    Onboard clock (default)
            - "ClkIn"           CLK IN front panel connector
            - "PXI_Star"        PXI star trigger line
            - "PXI_Trig0"       PXI trigger line 0 or RTSI line 0
            - "PXI_Trig1"       PXI trigger line 1 or RTSI line 1
            - "PXI_Trig2"       PXI trigger line 2 or RTSI line 2
            - "PXI_Trig3"       PXI trigger line 3 or RTSI line 3
            - "PXI_Trig4"       PXI trigger line 4 or RTSI line 4
            - "PXI_Trig5"       PXI trigger line 5 or RTSI line 5
            - "PXI_Trig6"       PXI trigger line 6 or RTSI line 6
            - "PXI_Trig7"       PXI trigger line 7 or RTSI line 7
            - "DDC_ClkIn"       Sample clock from DDC connector
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureSampleClockSource(self.vi, 
                                                          sampleClockSource)


    def ConfigureClockMode(self, clockMode):
        """
        Selects the clock mode for the signal generator.  Some signal 
        generators allow you to switch the Sample clock to High-Resolution or 
        Automatic Sampling mode with this function.
        
        When you select NIFGEN_VAL_DIVIDE_DOWN, NI-FGEN rounds the sample rate 
        to a frequency that can be achieved by dividing down the board clock 
        (Sample clock timebase). However, if you select 
        NIFGEN_VAL_HIGH_RESOLUTION, you can set the sample rate to any value. 
        If you select NIFGEN_VAL_AUTOMATIC, NI-FGEN selects the clock mode 
        based on the sample rate, using divide-down sampling when possible.
        
        
        Parameters
        ----------
        clockMode : str
            Sets the clock mode of the signal generator.  Allowable values are:
            
            - "NIFGEN_VAL_DIVIDE_DOWN"
            - "NIFGEN_VAL_HIGH_RESOLUTION"
            - "NIFGEN_VAL_AUTOMATIC"
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        
        Notes
        -----
        Notes  The signal generator must not be in the Generating state when 
        you call this function.

        You must call the niFgen_ConfigureOutputMode function to set the 
        outputMode parameter to NIFGEN_VAL_OUTPUT_SEQ, NIFGEN_VAL_OUTPUT_ARB, 
        or NIFGEN_VAL_OUTPUT_SCRIPT before calling this function.
        
        """
        return pynifgen.niFgen_ConfigureClockMode(self.vi, 
                                                  EvalAttr(clockMode))


    def AdjustSampleClockRelativeDelay(self, time):
        """
        Delays (or phase shifts) the Sample clock, which delays the generated
        signal. Delaying the Sample clock can be useful when synchronizing the
        output of multiple modules or when intentionally phase shifting the 
        output relative to a fixed reference, such as the PLL Reference clock.

        Adjustment time can be positive or negative, but it must be less than
        or equal to the Sample clock period. The delay takes effect 
        immediately after this function is called. To delay an external Sample
        clock, use the NIFGEN_ATTR_SAMPLE_CLOCK_ABSOLUTE_DELAY attribute.
        
        
        Parameters
        ----------
        time : double
            Specifies the amount of time to adjust the Sample clock delay.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_AdjustSampleClockRelativeDelay(self.vi, time)


    def ConfigureDigitalEdgeStartTrigger(self, source='', 
                                         edge='NIFGEN_VAL_RISING_EDGE'):
        """
        Configures the Start trigger for digital edge triggering.
        
        Parameters
        ----------
        source : str
            Specifies the output terminal to export the signal. For a complete
            list of the output terminals available on your device, refer to 
            the Device Routes tab in MAX.

            Defined Values
            - "" (empty string)       Do not export signal (default)
            - "PFI0"
            - "PFI1"
            - "PFI4"
            - "PFI5"
            - "PXI_Trig0"
            - "PXI_Trig1"
            - "PXI_Trig2"
            - "PXI_Trig3"
            - "PXI_Trig4"
            - "PXI_Trig5"
            - "PXI_Trig6"
            - "PXI_Trig7"
            - "DDC_ClkOut"
            - "PXI_Star"

        edge : str
            Specifies the edge to detect. Allowable values:
            
            - "NIFGEN_VAL_RISING_EDGE"
            - "NIFGEN_VAL_FALLING_EDGE"
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureDigitalEdgeStartTrigger(self.vi, 
                                                                source, 
                                                                EvalAttr(edge))


    def ConfigureP2PEndpointFullnessStartTrigger(self, 
                                                 p2pEndpointFullnessLevel):
        """
        Configures the Start trigger for to detect peer-to-peer endpoint 
        fullness. Generation begins when the number of samples in the
        peer-to-peer endpoint reaches the threshold indicated by the 
        p2pEndpointFullnessLevel parameter.
        
        
        Parameters
        ----------
        p2pEndpointFullnessLevel : int
            Specifies the quantity of data in the FIFO endpoint that asserts
            the trigger. The value -1 specifies that NI-FGEN uses a default
            value based on your endpoint configuration.  Units in samples per
            channel
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        
        Notes
        -----
        Note  Because there is an additional internal FIFO in the signal 
        generator, the writer peer must actually write 2,304 bytes more than
        the quantity of data specified by this function to satisfy the trigger
        level.
        
        """
        func = pynifgen.niFgen_ConfigureP2PEndpointFullnessStartTrigger
        return func(self.vi, p2pEndpointFullnessLevel)


    def ConfigureSoftwareEdgeStartTrigger(self):
        """
        Configures the Start trigger for software edge triggering.

        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureSoftwareEdgeStartTrigger(self.vi)


    def DisableStartTrigger(self):
        """
        Disables the Start trigger.

        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_DisableStartTrigger(self.vi)


    def ConfigureDigitalEdgeScriptTrigger(self, triggerID="ScriptTrigger0",
                                          source="PFI0", 
                                          edge="NIFGEN_VAL_RISING_EDGE"):
        """
        Configures the specified Script trigger for digital edge triggering.


        Parameters
        ----------
        triggerID : str
            Specifies the Script trigger used for triggering. Allowable values:
            
            - "ScriptTrigger0"
            - "ScriptTrigger1"
            - "ScriptTrigger2"
            - "ScriptTrigger3" 

        source : str
            Specifies which trigger source the signal generator uses.  
            Allowable values:
            
            - "PFI0"
            - "PFI1"
            - "PFI2"
            - "PFI3"
            - "PXI_Trig0"
            - "PXI_Trig1"
            - "PXI_Trig2"
            - "PXI_Trig3"
            - "PXI_Trig4"
            - "PXI_Trig5"
            - "PXI_Trig6"
            - "PXI_Trig7"
            - "PXI_Star"
            
        edge : str
            Specifies the edge to detect. Allowable values:
            
            - "NIFGEN_VAL_RISING_EDGE"
            - "NIFGEN_VAL_FALLING_EDGE"
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureDigitalEdgeScriptTrigger(self.vi, 
                                                                 triggerID, 
                                                                 source, edge)


    def ConfigureDigitalLevelScriptTrigger(self, triggerID="ScriptTrigger0",
                                           source="PFI0", level="HighLevel"):
        """
        Configures the specified Script trigger for digital level triggering.

        
        Parameters
        ----------
        triggerID : str
            Specifies the Script trigger used for triggering.  Allowable 
            values:
                
            - "ScriptTrigger0"
            - "ScriptTrigger1"
            - "ScriptTrigger2"
            - "ScriptTrigger3" 
            
        source : str
            Specifies which trigger source the signal generator uses.  
            Allowable values:
            
            - "PFI0"
            - "PFI1"
            - "PFI2"
            - "PFI3"
            - "PXI_Trig0"
            - "PXI_Trig1"
            - "PXI_Trig2"
            - "PXI_Trig3"
            - "PXI_Trig4"
            - "PXI_Trig5"
            - "PXI_Trig6"
            - "PXI_Trig7"
            - "PXI_Star"
            
        level : str
            Specifies whether the Script trigger asserts on a high or low 
            digital level.  Allowable values:
                
                - "HighLevel" (Script trigger asserts on a high digital level)
                - "LowLevel"  (Script trigger asserts on a low digital level)
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureDigitalLevelScriptTrigger(self.vi, 
                                                                  triggerID, 
                                                                  source, 
                                                                  level)


    def ConfigureSoftwareEdgeScriptTrigger(self, triggerID="ScriptTrigger0"):
        """
        Configures the specified Script trigger for software edge triggering.


        Parameters
        ----------
        triggerID : str
            Specifies the Script trigger used for triggering.  Allowable 
            values:
                
            - "ScriptTrigger0"
            - "ScriptTrigger1"
            - "ScriptTrigger2"
            - "ScriptTrigger3" 
            
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ConfigureSoftwareEdgeScriptTrigger(self.vi,
                                                                  triggerID)


    def DisableScriptTrigger(self, triggerID="ScriptTrigger0"):
        """
        Disables the specified Script trigger.

        
        Parameters
        ----------
        triggerID : str
            Specifies the Script trigger used for triggering.  Allowable 
            values:
                
            - "ScriptTrigger0"
            - "ScriptTrigger1"
            - "ScriptTrigger2"
            - "ScriptTrigger3" 
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_DisableScriptTrigger(self.vi, triggerID)


    def ConfigureTriggerMode(self, channelName="0", 
                             mode="NIFGEN_VAL_CONTINUOUS"):
        """
        Sets the trigger mode for your device. Refer to the Trigger Modes 
        topic for your device in the NI Signal Generators Help for 
        descriptions of the specific behavior for supported trigger modes.
        
        
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"
            
        mode : str, optional
            Specifies the trigger mode.  Run help(pynifgen.triggers) for more
            information.  Allowable values:
                
            - "NIFGEN_VAL_SINGLE" 
            - "NIFGEN_VAL_CONTINUOUS" (default)
            - "NIFGEN_VAL_STEPPED"
            - "NIFGEN_VAL_BURST"
            
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
            
        Notes
        -----
        Notes  The signal generator must not be in the Generating state when 
        you call this function.

        In Frequency List output mode, Stepped trigger mode is the same as
        Burst trigger mode.
        
        """
        return pynifgen.niFgen_ConfigureTriggerMode(self.vi, channelName,
                                                    EvalAttr(mode))


    def ConfigureSynchronization(self, channelName="0", 
                                 Synchronization="NIFGEN_VAL_NONE"):
        """
        Sets the signal generator to receive a synchronization signal to 
        synchronize two or more NI 5401/5411/5431 signal generators. One 
        signal generator should route a SYNC signal to a RTSI line by 
        calling the ExportSignal function (use the  RouteSignalOut function for
        the NI 5404), and other signal generators should receive the signal by 
        calling ConfigureSynchronization.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to configure the 
            synchronization signal.


        Synchronization : str
            Specify the source of the synchronization signal you want to use.
            Allowable values:
            
            - "NIFGEN_VAL_NONE"
            - "NIFGEN_VAL_RTSI_0"
            - "NIFGEN_VAL_RTSI_1"
            - "NIFGEN_VAL_RTSI_2"
            - "NIFGEN_VAL_RTSI_3"
            - "NIFGEN_VAL_RTSI_4"
            - "NIFGEN_VAL_RTSI_5"
            - "NIFGEN_VAL_RTSI_6"
            - "NIFGEN_VAL_TTL0"
            - "NIFGEN_VAL_TTL1"
            - "NIFGEN_VAL_TTL2"
            - "NIFGEN_VAL_TTL3"
            - "NIFGEN_VAL_TTL4"
            - "NIFGEN_VAL_TTL5"
            - "NIFGEN_VAL_TTL6"
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        
        Notes
        -----
        Notes  The signal generator must not be in the Generating state when 
        you call this function.

        Only the NI 5401/5411/5431 signal generators require this function to 
        be called for proper synchronization.
        
        """
        return pynifgen.niFgen_ConfigureSynchronization(self.vi, 
                                                        channelName, 
                                                        EvalAttr(Synchronization))


    def ExportSignal(self, signal="NIFGEN_VAL_ONBOARD_REFERENCE_CLOCK",
                     signalIdentifier="", outputTerminal=""):
        """
        Routes signals (clocks, triggers, and events) to the output terminal 
        you specify.

        Any routes created within a session persist after the session closes 
        to prevent signal glitching. To unconfigure signal routes created in 
        previous sessions, set resetDevice in the niFgen_init function to
        VI_TRUE or use the ResetDevice function.

        If you export a signal with this function and commit the session, the
        signal is routed to the output terminal you specify.
        
        
        Parameters
        ----------
        signal : str
            Specifies the source of the signal to route.  Allowable values:
            
            - "NIFGEN_VAL_ONBOARD_REFERENCE_CLOCK"
            - "NIFGEN_VAL_SYNC_OUT"
            - "NIFGEN_VAL_START_TRIGGER"
            - "NIFGEN_VAL_MARKER_EVENT"
            - "NIFGEN_VAL_SAMPLE_CLOCK_TIMEBASE"
            - "NIFGEN_VAL_SYNCHRONIZATION"
            - "NIFGEN_VAL_SAMPLE_CLOCK"
            - "NIFGEN_VAL_REFERENCE_CLOCK"
            - "NIFGEN_VAL_SCRIPT_TRIGGER"
            - "NIFGEN_VAL_READY_FOR_START_EVENT"
            - "NIFGEN_VAL_STARTED_EVENT"
            - "NIFGEN_VAL_DONE_EVENT"
            - "NIFGEN_VAL_DATA_MARKER_EVENT"
                
        signalIdentifier : str
            Specifies which instance of the selected signal to export.
            Allowable values:
                
            - "" (empty string)
            - "ScriptTrigger0"
            - "ScriptTrigger1"
            - "ScriptTrigger2"
            - "ScriptTrigger3"
            - "Marker0" 
            - "Marker1"
            - "Marker2"
            - "Marker3"
            - "DataMarker0"
            - "DataMarker1"
            - "DataMarker2"
            - "DataMarker3"

            NOTE:
            * These Data Marker values apply only to single-channel devices or
            to multichannel devices that are configured for single-channel 
            operation. When using a device that is configured for multichannel
            operation, specify the channel number along with the signal
            identifier. For example, to export Data Marker 0 on channel 1 of 
            a device configured for multichannel operation, use the value 
            "1/ DataMarker0." If you do not specify a channel when using a 
            device configured for multichannel generation, DataMarker0 
            generates on all channels.

        outputTerminal : str
            Specifies the output terminal to export the signal. For a complete
            list of the output terminals available on your device, refer to 
            the Device Routes tab in MAX.  Alowable values:
            
            - "" (empty string)       Do not export signal (default)
            - "PFI0"                  PFI line 0
            - "PFI1"                  PFI line 1
            - "PFI4"                  PFI line 4
            - "PFI5"                  PFI line 5
            - "PXI_Trig0"             PXI or RTSI line 0
            - "PXI_Trig1"             PXI or RTSI line 1
            - "PXI_Trig2"             PXI or RTSI line 2
            - "PXI_Trig3"             PXI or RTSI line 3
            - "PXI_Trig4"             PXI or RTSI line 4
            - "PXI_Trig5"             PXI or RTSI line 5
            - "PXI_Trig6"             PXI or RTSI line 6
            - "PXI_Trig7"             PXI or RTSI line 7
            - "DDC_ClkOut"            Clock out from DDC connector
            - "PXI_Star"              PXI star trigger line
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ExportSignal(self.vi, EvalAttr(signal), 
                                            signalIdentifier, 
                                            outputTerminal)


    def RouteSignalOut(self, channelName, from_, to):
        """
        Routes various signals in the signal generator to the RTSI lines and
        front panel terminals.

        
        Parameters
        ----------
        channelName : str
            Specifies the channel name for which you want to route a signal.

        from_ : str
            Various signals can be routed out the RTSI lines.  Allowable 
            values:
            
            - "NIFGEN_VAL_NONE"     
            - "NIFGEN_VAL_MARKER"
            - "NIFGEN_VAL_SYNC_OUT"
            - "NIFGEN_VAL_OUT_START_TRIGGER"
            - "NIFGEN_VAL_BOARD_CLOCK"
            - "NIFGEN_VAL_SYNCHRONIZATION"
            - "NIFGEN_VAL_SOFTWARE_TRIG"
            - "NIFGEN_VAL_OUT_UPDATE"
            - "NIFGEN_VAL_REF_OUT"
            - "NIFGEN_VAL_PXI_CLK10"
            - "NIFGEN_VAL_PXI_STAR"
            - "NIFGEN_VAL_PFI_0"
            - "NIFGEN_VAL_RTSI_0"
            - "NIFGEN_VAL_RTSI_1"
            - "NIFGEN_VAL_RTSI_2"
            - "NIFGEN_VAL_RTSI_3"
            - "NIFGEN_VAL_RTSI_4"
            - "NIFGEN_VAL_RTSI_5"
            - "NIFGEN_VAL_RTSI_6"
            - "NIFGEN_VAL_REF_CLOCK_RTSI_CLOCK"
            - "NIFGEN_VAL_ONBOARD_REFERENCE_CLOCK"
            - "NIFGEN_VAL_UPDATE_CLOCK"
            - "NIFGEN_VAL_PLL_REF_SOURCE"

        to : str
            The possible RTSI lines to which you can route a signal. Allowable 
            values:
                
            - "NIFGEN_VAL_RTSI_0"
            - "NIFGEN_VAL_RTSI_1"
            - "NIFGEN_VAL_RTSI_2"
            - "NIFGEN_VAL_RTSI_3"
            - "NIFGEN_VAL_RTSI_4"
            - "NIFGEN_VAL_RTSI_5"
            - "NIFGEN_VAL_RTSI_6"
            - "NIFGEN_VAL_REF_CLOCK_RTSI_CLOCK"
            - "NIFGEN_VAL_REF_OUT"
            - "NIFGEN_VAL_PFI_0"
            - "NIFGEN_VAL_PFI_1"
            - "NIFGEN_VAL_PFI_4"
            - "NIFGEN_VAL_PFI_5"
            - "NIFGEN_VAL_PXI_STAR"
            - "NIFGEN_VAL_PXI_CLK10"

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        
        Notes
        -----
        The signal generator must not be in the Generating state when you call
        this function.

        You can clear a previously routed signal by routing NIFGEN_VAL_NONE to 
        the destination terminal.
        
        """
        return pynifgen.niFgen_RouteSignalOut(self.vi, channelName, 
                                              EvalAttr(from_), 
                                              EvalAttr(to))
        


    def AllocateNamedWaveform(self, channelName, wfmName, numberOfSamples):
        """
        Specifies the size of a named waveform up front so that it can be 
        allocated in onboard memory before loading the associated data. Data 
        can then be loaded in smaller blocks with the niFgen Write (Binary16) 
        Waveform functions.

        
        Parameters
        ----------
        channelName : str, optional
            the channel name for which you want to allocate the named waveform.

        wfmName : str
            The name to associate with the allocated waveform.

        numberOfSamples : int
            Specifies the size of the waveform to allocate in samples.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_AllocateNamedWaveform(self.vi, channelName, 
                                                     wfmName, 
                                                     numberOfSamples)
        

    def SetNamedWaveformNextWritePosition(self, channelName, wfmName, 
                                          relativeTo, offset):
        """
        Sets the position in the waveform to which data is written at the next
        write. This function allows you to write to arbitrary locations within
        the waveform. These settings apply only to the next write to the 
        waveform specified by the waveformHandle parameter. Subsequent writes
        to that waveform begin where the last write left off, unless this 
        function is called again. The waveformHandle passed in must have been 
        created with a call to one of the following functions:
        
        - CreateWaveformF64
        - CreateWaveformI16
        - CreateWaveformFromFileI16
        - CreateWaveformFromFileF64
        - CreateWaveformFromFileHWS
        
            
        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"

        wfmName : str
            The name to associate with the allocated waveform.

        relativeTo : str
            Specifies the reference position in the waveform. This position and
            offset together determine where to start loading data into the 
            waveform.  Must be one of the following strings:
        
            - "NIFGEN_VAL_WAVEFORM_POSITION_START"
            - "NIFGEN_VAL_WAVEFORM_POSITION_CURRENT"

        offset : int
            Specifies the offset from the relativeTo parameter at which to
            start loading the data into the waveform.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        func = pynifgen.niFgen_SetNamedWaveformNextWritePosition
        return func(self.vi, 
                    channelName, wfmName, EvalAttr(relativeTo), offset)


    def WriteNamedWaveformF64(self, channelName, waveformName, 
                              data):
        """
        Writes floating-point data to the waveform in onboard memory. The 
        waveform handle passed in must have been created by a call to the 
        AllocateWaveform function or to one of the following functions:
        
            - CreateWaveformF64
            - CreateWaveformI16
            - CreateWaveformFromFileI16
            - CreateWaveformFromFileF64
            - CreateWaveformFromFileHWS
            
        
        By default, the subsequent call to the WriteNamedWaveformF64 
        function continues writing data from the position of the last sample 
        written. You can set the write position and offset by calling the
        SetNamedWaveformNextWritePosition function. If streaming is enabled,
        you can write more data than the allocated waveform size in onboard 
        memory. Refer to the Streaming topic for more information about 
        streaming data.


        Parameters
        ----------
        channelName : str
            The channel onto which the waveform data should be loaded.

        waveformName : str
            The name to associate with the allocated waveform.

        data : numpy.ndarray
            The array of data to load into the waveform
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteNamedWaveformF64(self.vi, channelName, 
                                                     waveformName, 
                                                     data.size, data)


    def WriteNamedWaveformI16(self, channelName, waveformName, data):
        """
        Writes binary data to the named waveform in onboard memory. The 
        waveform handle passed in must have been created by a call to the 
        AllocateWaveform function or to one of the following functions:
        
            - CreateWaveformF64
            - CreateWaveformI16
            - CreateWaveformFromFileI16
            - CreateWaveformFromFileF64
            - CreateWaveformFromFileHWS
        
        Parameters
        ----------
        channelName : str, optional
            The channel onto which the waveform data should be loaded.

        waveformName : str
            The name to associate with the allocated waveform.

        data : numpy.ndarray
            The array of data to load into the waveform
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteNamedWaveformI16(self.vi, channelName, 
                                                     waveformName, 
                                                     data.size, data)


    def WriteNamedWaveformComplexF64(self, channelName, waveformName, 
                                            data):
        """
        Writes complex floating-point data to the named waveform in onboard 
        memory on devices with the NIFGEN_ATTR_OSP_ENABLED attribute set to
        VI_TRUE and the NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE attribute set to 
        NIFGEN_VAL_OSP_COMPLEX. The waveform handle passed in must have been
        created by a call to the niFgen_AllocateWaveform function or to one of
        the following functions:
        
            - CreateWaveformF64
            - CreateWaveformI16
            - CreateWaveformFromFileI16
            - CreateWaveformFromFileF64
            - CreateWaveformFromFileHWS
        
        
        Parameters
        ----------
        channelName : str, optional
            The channel onto which the waveform data should be loaded.

        waveformName : str
            The name to associate with the allocated waveform.

        data : numpy.ndarray
            The array of data to load into the waveform
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteNamedWaveformComplexF64(self.vi, 
                                                            channelName, 
                                                            waveformName, 
                                                            data.size, data)

    def WriteNamedWaveformComplexI16(self, channelName, waveformName, 
                                            data):
        """
        Writes complex floating-point data to the named waveform in onboard 
        memory on devices with the NIFGEN_ATTR_OSP_ENABLED attribute set to 
        VI_TRUE and the NIFGEN_ATTR_OSP_DATA_PROCESSING_MODE attribute set to 
        NIFGEN_VAL_OSP_COMPLEX. The waveform handle passed in must have been
        created by a call to the niFgen_AllocateWaveform function or to one of
        the following functions:
        
            - CreateWaveformF64
            - CreateWaveformI16
            - CreateWaveformFromFileI16
            - CreateWaveformFromFileF64
            - CreateWaveformFromFileHWS
        
        
        Parameters
        ----------
        channelName : str, optional
            The channel onto which the waveform data should be loaded.

        waveformName : str
            The name to associate with the allocated waveform.

        data : numpy.ndarray
            The array of data to load into the waveform
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteNamedWaveformComplexI16(self.vi, 
                                                            channelName, 
                                                            waveformName, 
                                                            data.size, data)
        

    def DeleteNamedWaveform(self, channelName, waveformName):
        """
        Removes a previously created arbitrary waveform from the signal 
        generator memory and invalidates the waveform handle.        
        
        
        Parameters
        ----------
        channelName : str
            Specifies the channel onto which the named waveform is loaded.
            
        waveformName : str
            The name to associate with the allocated waveform.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_DeleteNamedWaveform(self.vi, channelName, 
                                                   waveformName)


    def WriteScript(self, channelName, script):
        """
        Writes a string containing one or more scripts that govern the 
        generation of waveforms.


        Parameters
        ----------
        channelName : str
            The channel on which the script is loaded.

        script : str
            Contains the text of the script you want to use for your generation
            operation.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteScript(self.vi, channelName, script)


    def DeleteScript(self, channelName, scriptName):
        """
        Deletes the specified script from onboard memory.

        
        Parameters
        ----------
        channelName : str
            The channel onto which the script is loaded.

        scriptName : str
            The name of the script you want to delete. The script name appears
            in the text of the script following the script keyword.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_DeleteScript(self.vi, channelName, scriptName)


    def ConfigureCustomFIRFilterCoefficients(self, channelName, coefficients):
        """
        Sets the FIR filter coefficients used by the onboard signal processing 
        block. The values are coerced to the closest settings achievable by the
        signal generator.

        Refer to the FIR Filter topic for your device in the NI Signal 
        Generators Help for more information about FIR filter coefficients. 
        This function is supported only for the NI 5441.
        
        Parameters
        ----------
        channelName : str
            The channel name for which you want to configure the operation mode.
            
        coefficients : numpy.ndarray
            the array of data the onboard signal processor uses for the FIR 
            filter coefficients. For the NI 5441, provide a symmetric array of
            95 coefficients to this parameter.
            
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        func = pynifgen.niFgen_ConfigureCustomFIRFilterCoefficients
        return func(self.vi, channelName, coefficients.size, coefficients)


    def GetFIRFilterCoefficients(self, channelName, coefficientsArray, 
                                 numberOfCoefficientsRead):
        """
        Returns the FIR filter coefficients used by the onboard signal 
        processing block. These coefficients are determined by NI-FGEN and
        based on the FIR filter type and corresponding attribute (Alpha, 
        Passband, BT) unless you are using the custom filter. If you are using 
        a custom filter, the coefficients returned are those set with the 
        ConfigureCustomFIRFilterCoefficients function coerced to the quantized
        values used by the device.

        To use this function, first call an instance of the 
        GetFIRFilterCoefficients function with the coefficientsArray parameter 
        set to VI_NULL. Calling the function in this state returns the current 
        size of the coefficientsArray as the value of the numberOfCoefficientsRead
        parameter. Create an array of this size, and call the 
        GetFIRFilterCoefficients function a second time, passing the new array 
        as the coefficientsArray parameter and the size as the arraySize 
        parameter. This second function call populates the array with the FIR 
        filter coefficients. 

        Refer to the FIR Filter topic for your device in the NI Signal 
        Generators Help for more information about FIR filter coefficients. 
        This function is supported only for the NI 5441. 
        
        Parameters
        ----------
        channelName : str
            The channel name for which you want to configure the operation 
            mode.

        coefficientsArray : double numpy.ndarray
            Specifies the array of data the onboard signal processor uses for 
            the FIR filter coefficients. For the NI 5441, provide a symmetric 
            array of 95 coefficients to this parameter. The array must have at
            least as many elements as the value that you specify in the 
            numberOfCoefficients parameter in this function.
        
            The coefficients should range between -1.00 and +1.00.

        numberOfCoefficientsRead : int numpy.ndarray
            the array of data containing the number of coefficients you want to read.
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        func = pynifgen.niFgen_GetFIRFilterCoefficients
        return func(self.vi, channelName, coefficientsArray.size, 
                    coefficientsArray, numberOfCoefficientsRead)


    def ManualEnableP2PStream(self, streamEndpoint):
        """
        Enables a peer-to-peer data stream using manual flow control.

        
        Parameters
        ----------
        streamEndpoint : str
            the stream endpoint FIFO to configure. Refer to the Peer-to-Peer
            Data Streaming documentation in the NI Signal Generators Help for
            more information.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ManualEnableP2PStream(self.vi, streamEndpoint)


    def WriteP2PEndpointI16(self, endpointName, numberOfSamples, endpointData):
        """
        Writes I16 data to the peer-to-peer endpoint. Use this function to 
        write initial data from the host to the endpoint before starting 
        generation to avoid an underflow at start.
        
        Parameters
        ----------
        endpointName : str
            The name of the FIFO endpoint. Data is written to the endpoint FIFO.

        numberOfSamples : int
            The number of samples to write into the endpoint FIFO.

        endpointData : int16 numpy.ndarray
            The array of data to write into the endpoint FIFO. The binary data 
            is left-justified.
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WriteP2PEndpointI16(self.vi, endpointName,
                                                   numberOfSamples, 
                                                   endpointData)


    def GetStreamEndpointHandle(self, streamEndpoint, readerHandle):
        """
        Returns a reader endpoint handle that can be used with NI-P2P to 
        configure a peer-to-peer stream with a signal generator endpoint.
        
        
        Parameters
        ----------
        streamEndpoint : str
            The stream endpoint FIFO to configure. Refer to the device-specific
            documentation for peer-to-peer streaming in the NI Signal 
            Generators Help for more information.

        Returns
        -------
        vistatus : int
            Status code of this operation
            
        readerHandle : int
            
        
        """
        readerHandle = ctypes.c_int32()
        vistatus = pynifgen.niFgen_GetStreamEndpointHandle(self.vi, 
                                                           streamEndpoint, 
                                                           readerHandle)
        
        return vistatus, readerHandle


    def SetAttributeint(self, channelName, attributeId, value):
        """
        This is a low-level function that you can use to set the values of 
        instrument-specific attributes and inherent IVI attributes. If the 
        attribute represents an instrument state, this function performs 
        instrument I/O in the following cases:
            
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              
              
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : int
            Value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SetAttributeint(self.vi, channelName,
                                               EvalAttr(attributeId), value)


    def SetAttributeViInt64(self, channelName, attributeId, value):
        """
        This is a low-level function that you can use to set the values of 
        instrument-specific attributes and inherent IVI attributes. If the 
        attribute represents an instrument state, this function performs 
        instrument I/O in the following cases:
        
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              
                      
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : int
            Value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SetAttributeViInt64(self.vi, channelName,
                                                   EvalAttr(attributeId),
                                                   value)


    def SetAttributeViReal64(self, channelName, attributeId, value):
        """
        This is a low-level function that you can use to set the values of 
        instrument-specific attributes and inherent IVI attributes. If the 
        attribute represents an instrument state, this function performs 
        instrument I/O in the following cases:
        
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              
              
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : int
            Value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SetAttributeViReal64(self.vi, 
                                                    channelName,
                                                    EvalAttr(attributeId),
                                                    value)


    def SetAttributedouble(self, channelName, attributeId, value):
        """
        This is a low-level function that you can use to set the values of 
        instrument-specific attributes and inherent IVI attributes. If the 
        attribute represents an instrument state, this function performs 
        instrument I/O in the following cases:
        
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.

                      
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : double
            Value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SetAttributedouble(self.vi, channelName, 
                                                  EvalAttr(attributeId), value)
    

    def SetAttributeViString(self, channelName, attributeId, value):
        """
        This is a low-level function that you can use to set the values of 
        instrument-specific attributes and inherent IVI attributes. If the 
        attribute represents an instrument state, this function performs 
        instrument I/O in the following cases:
        
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : str
            Value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SetAttributeViString(self.vi, channelName, 
                                                    EvalAttr(attributeId),
                                                    value)


    def SetAttributeViBoolean(self, channelName, attributeId, value):
        """
        This is a low-level function that you can use to set the values of 
        instrument-specific attributes and inherent IVI attributes. If the 
        attribute represents an instrument state, this function performs 
        instrument I/O in the following cases:
        
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : bool
            Value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SetAttributeViBoolean(self.vi, channelName, 
                                                     EvalAttr(attributeId),
                                                     value)


    def SetAttributeViSession(self, channelName, attributeId, value):
        """
        This is a low-level function that you can use to set the values of 
        instrument-specific attributes and inherent IVI attributes. If the 
        attribute represents an instrument state, this function performs 
        instrument I/O in the following cases:

        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
                            
                      
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : int
            Value to which you want to set the attribute.
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SetAttributeViSession(self.vi, channelName,
                                                     EvalAttr(attributeId),
                                                     value)


    def GetAttributeint(self, channelName, attributeId):
        """
        Queries the value of a ViInt32 attribute. You can use this function to
        get the values of instrument-specific attributes and inherent IVI 
        attributes. If the attribute represents an instrument state, this 
        function performs instrument I/O in the following cases:
        
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        Returns
        -------
        vistatus : int
            Status code of this operation
            
        value : int
            Value of the attribute
        
        """
        value = ctypes.c_int()
        vistatus = pynifgen.niFgen_GetAttributeint(self.vi, channelName, 
                                                   EvalAttr(attributeId), 
                                                   value)
        
        return vistatus, value.value


    def GetAttributeViInt64(self, channelName, attributeId):
        """
        Queries the value of a ViInt32 attribute. You can use this function to
        get the values of instrument-specific attributes and inherent IVI 
        attributes. If the attribute represents an instrument state, this 
        function performs instrument I/O in the following cases:
            
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        Returns
        -------
        vistatus : int
            Status code of this operation
            
        value : int
            Value of the attribute
        
        """
        value = ctypes.c_int64()
        vistatus = pynifgen.niFgen_GetAttributeViInt64(self.vi, channelName, 
                                                       EvalAttr(attributeId),
                                                       value)
        
        return vistatus, value.value


    def GetAttributedouble(self, channelName, attributeId):
        """
        Queries the value of a ViInt32 attribute. You can use this function to
        get the values of instrument-specific attributes and inherent IVI 
        attributes. If the attribute represents an instrument state, this 
        function performs instrument I/O in the following cases:
            
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              

        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        Returns
        -------
        vistatus : int
            Status code of this operation
            
        value : double
            Value of the attribute
        
        """
        value = ctypes.c_double()
        vistatus = pynifgen.niFgen_GetAttributedouble(self.vi, channelName, 
                                                      EvalAttr(attributeId),
                                                      value)
        
        return vistatus, value.value


    def GetAttributeViString(self, channelName, attributeId):
        """
        Queries the value of a ViInt32 attribute. You can use this function to
        get the values of instrument-specific attributes and inherent IVI 
        attributes. If the attribute represents an instrument state, this 
        function performs instrument I/O in the following cases:
            
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        Returns
        -------
        vistatus : int
            Status code of this operation
            
        value : str
            Value of the attribute
        
        """
        value = b' '*1000
        vistatus = pynifgen.niFgen_GetAttributeViString(self.vi, channelName,
                                                        EvalAttr(attributeId),
                                                        len(value), value)
        
        return vistatus, value.split(b'\x00')[0]



    def GetAttributeViBoolean(self, channelName, attributeId):
        """
        Queries the value of a ViInt32 attribute. You can use this function to
        get the values of instrument-specific attributes and inherent IVI 
        attributes. If the attribute represents an instrument state, this 
        function performs instrument I/O in the following cases:
            
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              

        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        Returns
        -------
        vistatus : int
            Status code of this operation
            
        value : bool
            Value of the attribute
        
        """
        value = ctypes.c_bool()
        vistatus = pynifgen.niFgen_GetAttributeViBoolean(self.vi, channelName,
                                                         EvalAttr(attributeId),
                                                         value)
        
        return vistatus, value.value


    def GetAttributeViSession(self, channelName, attributeId):
        """
        Queries the value of a ViInt32 attribute. You can use this function to
        get the values of instrument-specific attributes and inherent IVI 
        attributes. If the attribute represents an instrument state, this 
        function performs instrument I/O in the following cases:
            
        - State caching is disabled for the entire session or for the 
          particular attribute.
        - State caching is enabled and the currently cached value is 
          invalid or is different than the value you specify.
              
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        Returns
        -------
        vistatus : int
            Status code of this operation
            
        value : int
            Value of the attribute
        
        """
        value = ctypes.c_int32()
        vistatus = pynifgen.niFgen_GetAttributeViSession(self.vi, channelName,
                                                         EvalAttr(attributeId),
                                                         value)
        
        return vistatus, value.value


    def CheckAttributeint(self, channelName, attributeId, value):
        """
        Checks the validity of a value you specify for an attribute.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : double
            The value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        
        return pynifgen.niFgen_CheckAttributeint(self.vi, channelName, 
                                                 EvalAttr(attributeId),
                                                 value)


    def CheckAttributeViInt64(self, channelName, attributeId, value):
        """
        Checks the validity of a value you specify for an attribute.
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : int
            The value to which you want to set the attribute.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CheckAttributeViInt64(self.vi, channelName,
                                                     EvalAttr(attributeId),
                                                     value)


    def CheckAttributedouble(self, channelName, attributeId, value):
        """
        Checks the validity of a value you specify for an attribute.
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : double
            The value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CheckAttributedouble(self.vi, channelName,
                                                        EvalAttr(attributeId), value)


    def CheckAttributeViString(self, channelName, attributeId, value):
        """
        Checks the validity of a value you specify for an attribute.
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : str
            The value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CheckAttributeViString(self.vi, channelName, 
                                                      EvalAttr(attributeId),
                                                      value)


    def CheckAttributeViBoolean(self, channelName, attributeId, value):
        """
        Checks the validity of a value you specify for an attribute.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None empty string ("").

        attributeId : str
            The ID of an attribute.

        value : double
            The value to which you want to set the attribute.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CheckAttributeViBoolean(self.vi, channelName, 
                                                       EvalAttr(attributeId),
                                                       value)


    def CheckAttributeViSession(self, channelName, attributeId, value):
        """
        Checks the validity of a value you specify for an attribute.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel on which to check the attribute
            value if the attribute is channel-based. If the attribute is not 
            channel-based, then pass None or an empty string ("").

        attributeId : str
            The ID of an attribute.

        value : int
            The value to which you want to set the attribute. 

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CheckAttributeViSession(self.vi, 
                                                       channelName, 
                                                       EvalAttr(attributeId),
                                                       value)


    def ResetAttribute(self, channelName, attributeId):
        """
        Resets the attribute to its default value.

        Parameters
        ----------
        channelName : str, optional
            The channel name for which you want to enable the output.
            Defaults to "0"

        attributeId : str
            The ID of an attribute.
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ResetAttribute(self.vi, channelName, 
                                              EvalAttr(attributeId))


    def InitiateGeneration(self):
        """
        Initiates signal generation. If you want to abort signal generation,
        call the AbortGeneration function. After the signal generation
        is aborted, you can call the InitiateGeneration function to 
        cause the signal generator to produce a signal again.
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_InitiateGeneration(self.vi)


    def AbortGeneration(self):
        """
        Aborts any previously initiated signal generation. Call the 
        InitiateGeneration function to cause the signal generator to produce a
        signal again.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_AbortGeneration(self.vi)


    def SendSoftwareEdgeTrigger(self, triggerName="NIFGEN_VAL_START_TRIGGER",
                                triggerIdentifier="None"):
        """
        Sends a command to trigger the signal generator. This VI can act as 
        an override for an external edge trigger.
        
        
        Parameters
        ----------
        triggerName : str
            Specifies the type of trigger to send.  Allowable values:

            - "NIFGEN_VAL_START_TRIGGER"
            - "NIFGEN_VAL_SCRIPT_TRIGGER"

        triggerIdentifier : str
            Identifies the specific trigger to be used.  Allowable values:
            
            - "ScriptTrigger0"
            - "ScriptTrigger1"
            - "ScriptTrigger2"
            - "ScriptTrigger3" 

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        
        Notes
        -----
        This VI does not override external digital edge triggers of the 
        NI 5401/5411/5431.
        
        """
        if not hasattr(pynifgen, triggerName):
            raise Exception('See help for allowable triggerNames')
        
        triggerName = eval('pynifgen.%s'% triggerName)
        vistatus = pynifgen.niFgen_SendSoftwareEdgeTrigger(self.vi, 
                                                           triggerName,
                                                           triggerIdentifier)
        
        return vistatus


    def GetHardwareState(self):
        """
        Returns the current hardware state of the device and, if the device is
        in the hardware error state, the current hardware error.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        state : int
            Returns the hardware state of the signal generator.  One of the 
            following: 
            
            - pynifgen.NIFGEN_VAL_IDLE (0)
                - The device is in the Idle state.
            
            - pynifgen.NIFGEN_VAL_WAITING_FOR_START_TRIGGER (100)
                - The device is waiting for Start trigger.
            
            - pynifgen.NIFGEN_VAL_RUNNING (200)
                - The device is in the Running state.
            
            - pynifgen.NIFGEN_VAL_DONE (600)
                - The generation has completed successfully.
            
            - pynifgen.NIFGEN_VAL_HARDWARE_ERROR (1000)
                - There is a hardware error.
        
        """
        state = ctypes.c_int()
        vistatus = pynifgen.niFgen_GetHardwareState(self.vi, state)
        return vistatus, state.value


    def WaitUntilDone(self, maxTime):
        """
        Waits until the device is done generating or until the maximum time has
        expired.

        
        Parameters
        ----------
        maxTime : int
            The timeout value in milliseconds.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_WaitUntilDone(self.vi, maxTime)
        

    def IsDone(self):
        """
        Determines whether the current generation is complete.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation

        done : bool
            Returns information about the completion of waveform generation.
            True when generation is complete, false when not complete.
        
        """
        done = ctypes.c_bool()
        vistatus = pynifgen.niFgen_IsDone(self.vi, done)
        return vistatus, done.value


    def ResetWithDefaults(self):
        """
        Resets the instrument and reapplies initial user-specified settings
        from the logical name that was used to initialize the session. If the
        session was created without a logical name, this function is equivalent
        to the reset function.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ResetWithDefaults(self.vi)


    def ResetDevice(self):
        """
        Performs a hard reset on the device. Generation is stopped, all routes
        are released, external bidirectional terminals are tristated, FPGAs are
        reset, hardware is configured to its default state, and all session 
        attributes are reset to their default states.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ResetDevice(self.vi)


    def Disable(self):
        """
        Places the instrument in a quiescent state where it has minimal or no 
        impact on the system to which it is connected. The analog output and 
        all exported signals are disabled.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_Disable(self.vi)


    def self_test(self):
        """
        Runs the instrument self-test routine and returns the test result(s).
        
        
        Parameters
        ----------
        None        
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        testResult : int
            tains the value returned from the instrument self-test.  
            Zero means success.
        
        testMessage : str
            Self-test response string from the instrument
            
        
        Notes
        -----
        When used on some signal generators, the device is reset after the 
        self_test function runs. If you use the self_test function, your device
        may not be in its previously configured state after the function runs.
        
        """
        testMessage = ctypes.create_string_buffer(1024)
        testResult = ctypes.c_int16()
        vistatus = pynifgen.niFgen_self_test(self.vi, 
                                             testResult, 
                                             testMessage)
        
        testMessage = testMessage.raw.split(b'\x00')[0].decode('utf-8')
        
        return vistatus, testResult.value, testMessage


    def revision_query(self):
        """
        Returns the revision numbers of the NI-FGEN and instrument firmware.

        
        Parameters
        ----------
        None

        
        Returns
        -------
        vistatus : int
            Status code of this operation

        driverRev : str
            NI-FGEN software revision numbers

        instrRev : str
            the instrument firmware revision numbers
        
        """
        driverRev = b' '*1024
        instrRev = b' '*1024
        vistatus = pynifgen.niFgen_revision_query(self.vi, driverRev, instrRev)
        
        driverRev = driverRev.split(b'\x00')[0].decode('utf-8')
        instrRev = instrRev.split(b'\x00')[0].decode('utf-8')
        
        return vistatus, driverRev, instrRev


    def GetNextCoercionRecord(self):
        """
        Returns the coercion information associated with the IVI session. This
        function retrieves and clears the oldest instance in which the NI-FGEN
        coerced a value you specified to another value.

        If you set the NIFGEN_ATTR_RECORD_COERCIONS attribute to VI_TRUE,
        NI-FGEN keeps a list of all coercions it makes on ViInt32 or ViReal64 
        values that you pass to NI-FGEN functions. You use this function to 
        retrieve information from that list.
        
        If the next coercion record str, including the terminating NUL byte,
        contains more bytes than you indicate in this parameter, the function 
        copies bufferSize -1 bytes into the buffer, places an ASCII NUL byte 
        at the end of the buffer, and returns the buffer size you must pass to
        get the entire value. For example, if the value is "123456" and 
        bufferSize is 4, the function places "123" into the buffer and returns
        7.
        
        If you pass a negative number, the function copies the value to the 
        buffer regardless of the number of bytes in the value.
        
        If you pass 0, you can pass VI_NULL for the coercionRecord buffer 
        parameter.
        
        The function returns an empty string in the coercionRecord parameter 
        if no coercion records remain for the session.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation

        record : str
            Returns the next coercion record for the IVI session. If there are 
            no coercion records, the function returns an empty string.
        
        """
        record = b' '*1024
        vistatus = pynifgen.niFgen_GetNextCoercionRecord(self.vi, 
                                                         len(record), 
                                                         record)
        
        return vistatus, record.split(b'\x00')[0].decode('utf-8')


    def ClearError(self):
        """
        Clears Error
        

        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ClearError(self.vi)


    def LockSession(self, callerHasLock):
        """
        Obtains a multithread lock on the instrument session. Before it does so
        this function waits until all other execution threads have released 
        their locks on the instrument session.
        
        Other threads might have obtained a lock on this session in the 
        following ways:
            
        - Your application called the niFgen_LockSession function.
        - A call to the NI-FGEN locked the session.
        - A call to the IVI Engine locked the session.
        
        After your call to the LockSession function returns successfully, no
        other threads can access the instrument session until you call the 
        UnlockSession function.
        
        Use the LockSession function and the UnlockSession function around a 
        sequence of calls to NI-FGEN functions if you require that the 
        instrument retain its settings through the end of the sequence.
        
        You can safely make nested calls to the LockSession function within 
        the same thread. To completely unlock the session, you must balance 
        each call to the LockSession function with a call to the UnlockSession 
        function. If, however, you use the callerHasLock parameter in all 
        calls to the LockSession function and the UnlockSession function 
        within a function, the IVI Engine locks the session only once within 
        the function regardless of the number of calls you make to the 
        LockSession function. This configuration allows you to call the
        UnlockSession function just once at the end of the function.    
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation

        Notes
        -----
        Stores bool callerHasLock to self.  The value of this can be used to
        check a session has been locked.
        
        """
        if not hasattr(self, 'callerHasLock'): 
            self.callerHasLock = ctypes.c_bool()
        return pynifgen.niFgen_LockSession(self.vi, self.callerHasLock)


    def UnlockSession(self):
        """
        Releases a lock that you acquired on an instrument session using the 
        LockSession function.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        if not hasattr(self, 'callerHasLock'): 
            raise Exception('Session not locked')
            
        return pynifgen.niFgen_UnlockSession(self.vi, self.callerHasLock)


    def GetNextInterchangeWarning(self, bufferSize, warnString):
        """
        Returns the interchangeability warnings associated with the IVI 
        session. It retrieves and clears the oldest instance in which the class
        driver recorded an interchangeability warning. Interchangeability 
        warnings indicate that using your application with a different 
        instrument might cause different behavior. Use this function to 
        retrieve interchangeability warnings.

        NI-FGEN performs interchangeability checking when the 
        NIFGEN_ATTR_INTERCHANGE_CHECK attribute is set to VI_TRUE.
        
        The function returns an empty string in the interchangeWarning 
        parameter if no interchangeability warnings remain for the session.
        
        In general, NI-FGEN generates interchangeability warnings when an 
        attribute that affects the behavior of the instrument is in a state 
        that you did not specify.
        
        Parameters
        ----------
        bufferSize : int
            The number of bytes in the ViChar array you specify for the 
            interchangeWarning parameter.
            
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        warnString : str
            The next interchange warning for the IVI session. If there are no 
            interchange warnings, the function returns an empty string.
        
        """
        warnString = b' '*1024
        vistatus = pynifgen.niFgen_GetNextInterchangeWarning(self.vi, 
                                                             bufferSize, 
                                                             warnString)
        
        return vistatus, warnString.split(b'\x00')[0].decode('utf-8')


    def ClearInterchangeWarnings(self):
        """
        Clears the list of current interchange warnings.

        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ClearInterchangeWarnings(self.vi)


    def ResetInterchangeCheck(self):
        """
        When developing a complex test system that consists of multiple test 
        modules, NI recommends that you design the test modules so that they 
        can run in any order. To do so requires ensuring that each test module
        completely configures the state of each instrument it uses. If a 
        particular test module does not completely configure the state of an 
        instrument, the state of the instrument depends on the configuration 
        from a previously executed test module. If you execute the test modules
        in a different order, the behavior of the instrument and therefore the 
        entire test module is likely to change. This change in behavior is 
        generally instrument specific and represents an interchangeability 
        problem.

        You can use this function to test for such cases. After you call this 
        function, the interchangeability checking algorithms in the specific 
        driver ignore all previous configuration operations. By calling this 
        function at the beginning of a test module, you can determine whether 
        the test module has dependencies on the operation of previously 
        executed test modules.

        This function does not clear the interchangeability warnings from the 
        list of previously recorded interchangeability warnings. If you want to
        guarantee that the niFgen_GetNextInterchangeWarning function only 
        returns those interchangeability warnings that are generated after 
        calling this function, you must clear the list of interchangeability 
        warnings. You can clear the interchangeability warnings list by 
        repeatedly calling the niFgen_GetNextInterchangeWarning function until
        no more interchangeability warnings are returned. If you are not 
        interested in the content of those warnings, you can call the 
        ClearInterchangeWarnings function.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ResetInterchangeCheck(self.vi)


    def SelfCal(self):
        """
        Performs a full internal self-calibration on the device. If the 
        calibration is successful, new calibration data and constants are 
        stored in the onboard EEPROM.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SelfCal(self.vi)


    def InitializeAnalogOutputCalibration(self):
        """
        Sets up the device to start the analog output calibration.


        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_InitializeAnalogOutputCalibration(self.vi)



    def GetSelfCalSupported(self, selfCalSupported):
        """
        Returns whether the device supports self-calibration.

        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        selfCalSupported : bool
            True when the device supports self-calibration.
            
        """
        selfCalSupported = ctypes.c_bool()
        vistatus = pynifgen.niFgen_GetSelfCalSupported(self.vi, selfCalSupported)
        return vistatus, selfCalSupported.value


    def GetSelfCalLastDateAndTime(self):
        """
        Returns the date and time of the last successful self calibration.
        The time returned is 24-hour (military) local time; for example, if the
        device was calibrated at 2:30 PM, this function returns 14 for the hour
        parameter and 30 for the minute parameter.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        year : int
             The year of the last successful calibration.
        month : int
            The month of the last successful calibration.
        day : int
            The day of the last successful calibration.
        hour : int
            The hour of the last successful calibration.
        minute : int
            The minute of the last successful calibration.  
            
        """
        year = ctypes.c_int()
        month = ctypes.c_int()
        day = ctypes.c_int()
        hour = ctypes.c_int()
        minute = ctypes.c_int()
        vistatus = pynifgen.niFgen_GetSelfCalLastDateAndTime(self.vi, year, 
                                                            month, day, hour,
                                                            minute)
        
        return (vistatus, year.value, month.value, day.value, hour.value, 
                minute.value)


    def GetExtCalLastDateAndTime(self):
        """
        Returns the date and time of the last successful external calibration.
        The time returned is 24-hour (military) local time; for example, if the
        device was calibrated at 2:30 PM, this function returns 14 for the hour
        parameter and 30 for the minute parameter.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        year : int
             The year of the last successful calibration.
             
        month : int
            The month of the last successful calibration.
            
        day : int
            The day of the last successful calibration.
            
        hour : int
            The hour of the last successful calibration.
            
        minute : int
            The minute of the last successful calibration.  
            
        """
        year = ctypes.c_int()
        month = ctypes.c_int()
        day = ctypes.c_int()
        hour = ctypes.c_int()
        minute = ctypes.c_int()
        vistatus = pynifgen.niFgen_GetExtCalLastDateAndTime(self.vi, year, 
                                                            month, day, hour,
                                                            minute)
        
        return (vistatus, year.value, month.value, day.value, hour.value, 
                minute.value)


    def GetSelfCalLastTemp(self):
        """
        Returns the temperature at the last successful self-calibration. The 
        temperature is returned in degrees Celsius.
        
        
        Parameters
        ----------
        None        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        temp : double
            The temperature at the last successful calibration in degrees
            Celsius.
        
        
        """
        temp = ctypes.c_double()
        vistatus = pynifgen.niFgen_GetSelfCalLastTemp(self.vi, temp)
        return vistatus, temp.value


    def GetExtCalLastTemp(self):
        """
        Returns the temperature at the last successful external calibration. 
        The temperature is returned in degrees Celsius.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        temp : double
            The temperature at the last successful calibration in degrees
            Celsius.
        
        """
        temp = ctypes.c_double()
        vistatus = pynifgen.niFgen_GetExtCalLastTemp(self.vi, temp)
        return vistatus, temp.value


    def GetExtCalRecommendedInterval(self):
        """
        Returns the recommended interval between external calibrations in
        months.

        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        months : int
            The recommended interval between external calibrations in months.
        
        """
        months = ctypes.c_int32()
        vistatus = pynifgen.niFgen_GetExtCalRecommendedInterval(self.vi, 
                                                                months)
        
        return vistatus, months.value


    def ChangeExtCalPassword(self, oldPassword, newPassword):
        """
        Changes the password that is required to initialize an external 
        calibration session. The password may be up to four characters long.
        

        Parameters
        ----------
        oldPassword : str
            The old (current) external calibration password.

        newPassword : str
            The new (desired) external calibration password. The password may 
            be up to four characters long.
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_ChangeExtCalPassword(self.vi, oldPassword, newPassword)
        

    def SetCalUserDefinedInfo(self, info):
        """
        Stores user-defined information in the onboard EEPROM. Call the 
        GetCalUserDefinedInfoMaxSize function to determine the maximum number
        of characters that can be stored.
        
        Parameters
        ----------
        info : str
            Information string that should be stored in the EEPROM.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_SetCalUserDefinedInfo(self.vi, info)


    def GetCalUserDefinedInfo(self):
        """
        Retrieves user-defined information from the onboard EEPROM. Call the 
        GetCalUserDefinedInfoMaxSize function to determine the number of 
        characters that can be retrieved. 
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation

        info : ViString
            User information.
        
        """
        info = b' '*1024
        vistatus = pynifgen.niFgen_GetCalUserDefinedInfo(self.vi, info)
        
        return vistatus, info.split(b'\x00')[0].decode('utf-8')


    def GetCalUserDefinedInfoMaxSize(self, infoSize):
        """
        Returns the maximum number of characters, excluding the termination 
        character, of user-defined information that can be stored in the 
        onboard EEPROM.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        infoSize : int
            Specifies the maximum number of characters of user defined info 
            that can be stored in the onboard EEPROM.
        
        """
        infoSize = ctypes.c_int()
        vistatus = pynifgen.niFgen_GetCalUserDefinedInfoMaxSize(self.vi, 
                                                                infoSize)
        
        return vistatus, infoSize.value


    def ReadCurrentTemperature(self):
        """
        Reads the current onboard temperature of the device. The temperature
        is returned in degrees Celsius.
        
        Parameters
        ----------
        None

        
        Returns
        -------
        vistatus : int
            Status code of this operation
            
        temperature : double
            the current temperature read from onboard temperature sensors, in 
            degrees Celsius.
        
        """
        temperature = ctypes.c_double()
        vistatus = pynifgen.niFgen_ReadCurrentTemperature(self.vi, 
                                                          temperature)
        
        return vistatus, temperature.value


    def RestoreLastExtCalConstants(self):
        """
        Restore Last Ext Cal Constants
        
        Overwrites the current calibration constants with those from the last 
        successful external calibration. This action effectively undoes any 
        self-calibrations performed since the last time an external calibration
        was performed. This function should be used if a self-calibration 
        produced invalid calibration constants.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_RestoreLastExtCalConstants(self.vi)
        
    
    def close(self):
        """
        Performs the following operations
        
        - Closes the instrument I/O session.
        - Destroys the NI-FGEN session and all of its attributes.
        - Deallocates any memory resources NI-FGEN uses.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        
        Notes
        -----
        After calling niFgen_close, you cannot use NI-FGEN again until you
        call the niFgen_init or niFgen_InitWithOptions functions.
        
        Not all signal routes established by calling the niFgen_ExportSignal
        and niFgen_RouteSignalOut functions are released when the NI-FGEN 
        session is closed. The following table shows what will happen to a 
        signal route on your device when the NI-FGEN session is closed.

        ===================   =================        ================
        Routes To             NI 5401/5411/5431        Other
        ===================   =================        ================
        Front Panel           Remain connected         Remain connected
        RTSI/PXI Backplane    Remain connected         Disconnected
        ===================   =================        ================
        
        """
        return pynifgen.niFgen_close(self.vi)


def GetSoftwareInfo():
    """
    Creates a simpulated object and runs a software query
    """
    # initialize a Simulate a PCI-5402
    option = 'Simulate=1,DriverSetup=Model:5402;BoardType:PCI'
    vi = pynifgen.PyViSession('simdev', optionString=option)

    # print results
    vistatus, driverRev, instrRev = vi.revision_query()
    return driverRev.split(', ')


class InitExtCal(PyViSession):
    """
    Creates and initializes a special NI-FGEN external calibration session.
    The ViSession returned is an NI-FGEN session that can be used to 
    configure the device using normal attributes and functions. However, 
    flags have been set that allow you to program an external calibration
    procedure using the special calibration attributes and functions. The
    NI 5401/5404/5411/5431 have different calibration functions. Refer to 
    the calibration procedure for the signal generator for more 
    information.
    
    
    Parameters
    ----------
    resourceName : str
        The resource name of the device to initialize. 

    password : str
        The calibration password required to open an external calibration 
        session to the device.

    """
        
        
    def __init__(self, resourceName, password):
        """ Initialize calibration object """
        self.vi = ctypes.c_int()
        pynifgen.niFgen_InitExtCal(resourceName, password, self.vi)
    
    
    def CloseExtCal(self, action="NIFGEN_VAL_EXT_CAL_ABORT"):
        """
        Closes an NI-FGEN external calibration session and, if specified,
        stores the new calibration constants and calibration data, such as time
        and temperature, in the onboard EEPROM.
        
        
        Parameters
        ----------
        action : str
            Specifies the action to perform upon closing.
            
            ============================ =====================================
            Defined Values               Description
            ============================ =====================================
            "NIFGEN_VAL_EXT_CAL_ABORT"   No changes are made to the calibration
                                         constants and data in the EEPROM.
            "NIFGEN_VAL_EXT_CAL_COMMIT"  The new calibration constants and data
                                         determined during the external 
                                         calibration session are stored in the 
                                         onboard EEPROM.
            ============================ =====================================
        
            Default Value: "NIFGEN_VAL_EXT_CAL_ABORT"
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CloseExtCal(self.vi, action)


    def CalAdjustMainPathPreAmpOffset(self, channelName, configuration, 
                                      gainDACValues, offsetDACValues, 
                                      measuredOutputs):
        """
        Calculates calibration constants pertaining to the preamplifier offset
        of the main analog path. During external calibration, you can put the 
        device in different configurations; program different gain, offset, and
        main DAC values; and take measurements of the resulting output 
        voltage. Pass the configuration data, as well as the measurements, to 
        this function to allow NI-FGEN to calculate the appropriate calibration
        constants and store them in the onboard EEPROM when the calibration 
        session is committed.
        
        
        Parameters
        ----------
        channelName : str
            Specifies the name of the channel being calibrated.

        configuration : int
            Specifies the preamplifier stage configuration. Refer to the 
            calibration procedure for your device for information about what
            configurations must be calibrated.

        gainDACValues : int numpy.ndarray
            An array of the values programmed to the gain calibration DAC 
            during this calibration stage.

        offsetDACValues : int numpy.ndarray
            An array of the values programmed to the offset calibration DAC 
            during this calibration stage.

        measuredOutputs : double numpy.ndarray
            Specifies an array of the analog output voltages measured during
            this calibration stage.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CalAdjustMainPathPreAmpOffset(self.vi, 
                                                             channelName, 
                                                             configuration,
                                                             gainDACValues,
                                                             offsetDACValues,
                                                             measuredOutputs)


    def CalAdjustMainPathPreAmpGain(self, channelName, configuration, 
                                    mainDACValues, gainDACValues, 
                                    offsetDACValues, measuredOutputs):
        """
        Calculates calibration constants pertaining to the preamplifier gain of
        the main analog path. During external calibration, you can put the 
        device in different configurations; program different gain, offset, and
        main DAC values; and take measurements of the resulting output 
        voltage. Pass the configuration data, as well as the measurements to
        this function to allow NI-FGEN to calculate the appropriate calibration
        constants and store them in the onboard EEPROM when the calibration 
        session is committed.
        
        
        Parameters
        ----------
        channelName : str
            Specifies the name of the channel being calibrated.

        configuration : int
            Specifies the preamplifier stage configuration. Refer to the 
            calibration procedure for your device for information about what
            configurations must be calibrated.
            
        mainDACValues : int
            Spcifies an array of the values programmed to the main output DAC 
            during this calibration stage.

        gainDACValues : int numpy.ndarray
            An array of the values programmed to the gain calibration DAC 
            during this calibration stage.

        offsetDACValues : int numpy.ndarray
            An array of the values programmed to the offset calibration DAC 
            during this calibration stage.

        measuredOutputs : double numpy.ndarray
            Specifies an array of the analog output voltages measured during
            this calibration stage.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CalAdjustMainPathPreAmpGain(self.vi, 
                                                           channelName, 
                                                           configuration,
                                                           mainDACValues,
                                                           gainDACValues,
                                                           offsetDACValues,
                                                           measuredOutputs)


    def CalAdjustMainPathPostAmpGainAndOffset(self, channelName, configuration,
                                              mainDACValues, gainDACValues, 
                                              offsetDACValues, measuredOutputs):
        """
        Calculates calibration constants pertaining to the postamplifier gain
        and offset of the main analog path. During external calibration, you 
        can put the device in different configurations; program different gain,
        offset, and main DAC values; and take measurements of the resulting 
        output voltage. Pass the configuration data, as well as the 
        measurements to this function to allow NI-FGEN to calculate the 
        appropriate calibration constants and store them in the onboard EEPROM
        when the calibration session is committed.
        
        
        Parameters
        ----------
        channelName : str
            Specifies the name of the channel being calibrated.

        configuration : int
            Specifies the preamplifier stage configuration. Refer to the 
            calibration procedure for your device for information about what
            configurations must be calibrated.
            
        mainDACValues : int
            Spcifies an array of the values programmed to the main output DAC 
            during this calibration stage.

        gainDACValues : int numpy.ndarray
            An array of the values programmed to the gain calibration DAC 
            during this calibration stage.

        offsetDACValues : int numpy.ndarray
            An array of the values programmed to the offset calibration DAC 
            during this calibration stage.

        measuredOutputs : double numpy.ndarray
            Specifies an array of the analog output voltages measured during
            this calibration stage.
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        
        return pynifgen.niFgen_CalAdjustMainPathPostAmpGainAndOffset(self.vi, 
                                                                     channelName, 
                                                                     configuration,
                                                                     mainDACValues,
                                                                     gainDACValues,
                                                                     offsetDACValues,
                                                                     measuredOutputs)


    def CalAdjustDirectPathGain(self, channelName, mainDACValues, 
                                gainDACValues, measuredOutputs):
        """
        Calculates calibration constants pertaining to the gain of the direct 
        analog path. During external calibration, you can put the device in 
        different configurations; program different gain and main DAC values; 
        and take measurements of the resulting output voltage. Pass the
        configuration data, as well as the measurements, to this function to 
        allow NI-FGEN to calculate the appropriate calibration constants and 
        store them in the onboard EEPROM when the calibration session is 
        committed.


        Parameters
        ----------
        channelName : str
            Specifies the name of the channel being calibrated.

        mainDACValues : int
            Spcifies an array of the values programmed to the main output DAC 
            during this calibration stage.

        gainDACValues : int numpy.ndarray
            An array of the values programmed to the gain calibration DAC 
            during this calibration stage.

        measuredOutputs : double numpy.ndarray
            Specifies an array of the analog output voltages measured during
            this calibration stage.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CalAdjustDirectPathGain(self.vi, channelName, 
                                                       mainDACValues, 
                                                       gainDACValues, 
                                                       measuredOutputs)


    def CalAdjustMainPathOutputImpedance(self, channelName, configuration, 
                                         loadImpedance, measuredSourceVoltage, 
                                         measuredVoltageAcrossLoad):
        """
        Calculates calibration constants pertaining to main analog path output
        impedance. During external calibration, you can put the device in
        different configurations and take measurements of the resulting output
        voltage across different loads. Pass the configuration data, as well 
        as the measurements, to this function to allow NI-FGEN to calculate the
        appropriate calibration constants and store them in the onboard EEPROM
        when the calibration session is committed.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel being calibrated.

        configuration : int
            Specifies the main path output impedance configuration. Refer to 
            the calibration procedure for your device for information on what
            configurations must be calibrated.

        loadImpedance : double
            	Specifies the impedance of the load across which the measurement
                passed in as measuredVoltageAcrossLoad is taken.

        measuredSourceVoltage : double
            	Specifies the analog output voltage measured across a very
                high-impedance load.

        measuredVoltageAcrossLoad : double
            Specifies the analog output voltage measured across the load 
            impedance specified in the loadImpedance parameter.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CalAdjustMainPathOutputImpedance(self.vi, 
                                                                channelName,
                                                                configuration,
                                                                loadImpedance, 
                                                                measuredSourceVoltage,
                                                                measuredVoltageAcrossLoad)


    def CalAdjustDirectPathOutputImpedance(self, channelName, configuration, 
                                           loadImpedance, 
                                           measuredSourceVoltage, 
                                           measuredVoltageAcrossLoad):
        """
        Calculates calibration constants pertaining to direct analog path 
        output impedance. During external calibration, you can put the device
        in different configurations and take measurements of the resulting 
        output voltage across different loads. Pass the configuration data, 
        as well as the measurements, to this function to allow NI-FGEN to 
        calculate the appropriate calibration constants and store them in the
        onboard EEPROM when the calibration session is committed.
        
        
        Parameters
        ----------
        channelName : str
            Specifies the name of the channel being calibrated.
            
        configuration : int
            Specifies the main path output impedance configuration. Refer to 
            the calibration procedure for your device for information on what
            configurations must be calibrated.
            
        loadImpedance : double
            	Specifies the impedance of the load across which the measurement
                passed in as measuredVoltageAcrossLoad is taken.
                
        measuredSourceVoltage : double
            	Specifies the analog output voltage measured across a very
                high-impedance load.

        measuredVoltageAcrossLoad : double
            Specifies the analog output voltage measured across the load 
            impedance specified in the loadImpedance parameter.        
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CalAdjustDirectPathOutputImpedance(self.vi,
                                                                  channelName,
                                                                  configuration,
                                                                  loadImpedance,
                                                                  measuredSourceVoltage,
                                                                  measuredVoltageAcrossLoad)


    def InitializeOscillatorFrequencyCalibration(self):
        """
        Sets up the device to start the VCXO calibration.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_InitializeOscillatorFrequencyCalibration(self.vi)
        


    def CalAdjustOscillatorFrequency(self, desiredFrequencyInHz, 
                                     measuredFrequencyInHz):
        """
        Calculates calibration constants pertaining to the VCXO. During 
        external calibration, you can generate sine waves and take measurements
        of the resulting output frequency. Pass the desired and measured 
        frequencies to this function to allow NI-FGEN to calculate the 
        appropriate calibration constants and store them in the onboard 
        EEPROM when the calibration session is committed.
        
        
        Parameters
        ----------
        desiredFrequencyInHz : double
            Specifies the expected frequency of the output waveform.

        measuredFrequencyInHz : double
            Specifies the actual measured frequency of the output waveform.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        
        return pynifgen.niFgen_CalAdjustOscillatorFrequency(self.vi, 
                                                            desiredFrequencyInHz,
                                                            measuredFrequencyInHz)
        

    def InitializeCalADCCalibration(self):
        """
        Initializes an external calibration session for ADC calibration. For 
        the NI 5421/5422/5441, ADC calibration involves characterizing the gain
        and offset of the onboard ADC.
        
        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_InitializeCalADCCalibration(self.vi)


    def CalAdjustADC(self, channelName, configuration,
                     voltagesMeasuredExternally, voltagesMeasuredWithCalADC):
        """
        Calculates calibration constants pertaining to the gain and offset of 
        the onboard calibration ADC. During external calibration, you can
        generate voltages and measure them both externally and with the 
        calibration ADC. Pass the measured voltages to this function to allow 
        NI-FGEN to calculate the appropriate calibration constants and store 
        them in the onboard EEPROM when the calibration session is committed.


        Parameters
        ----------
        channelName : str, optional
            The name of the channel being calibrated.

        configuration : int
            Specifies the main path configuration.

        voltagesMeasuredExternally : double numpy.ndarray
            Specifies an array of analog output voltages measured with an 
            external instrument.

        voltagesMeasuredWithCalADC : double numpy.ndarray
            Specifies an array of analog output voltages measured with the 
            onboard calibration ADC.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        
        return pynifgen.niFgen_CalAdjustADC(self.vi, channelName, 
                                            configuration, 
                                            voltagesMeasuredExternally, 
                                            voltagesMeasuredWithCalADC)


    def ReadCalADC(self, numberOfReadsToAverage, returnCalibratedValue, 
                   calADCValue):
        """
        Takes one or more voltage measurements from the onboard calibration ADC
        and returns the value or the average value. The signal that the ADC 
        actually measures can be specified using the NIFGEN_ATTR_CAL_ADC_INPUT
        attribute. The ADC has some inherent gain and offset. These values can
        be determined during an external calibration session and stored in the
        calibration EEPROM.

        If the returnCalibratedValue parameter is VI_TRUE, NI-FGEN adjusts the 
        value that is returned to account for the gain and offset of the ADC. 
        Otherwise, the raw voltage value reported by the ADC is returned.
        
        
        Parameters
        ----------
        numberOfReadsToAverage : int
            The number of measurements to be taken and averaged to determine 
            the return value.
        
        returnCalibratedValue : bool
            Specifies whether the voltage returned from the ADC should be 
            adjusted to account for the gain and offset of the ADC.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation

        calADCValue : double
             The average of the voltage measurements taken from the onboard 
             calibration ADC.
        
        """
        calADCValue = ctypes.c_double()
        vistatus = pynifgen.niFgen_ReadCalADC(self.vi, numberOfReadsToAverage, 
                                              returnCalibratedValue, 
                                              calADCValue)
        
        return vistatus, calADCValue.value


    def InitializeFlatnessCalibration(self):
        """
        Initializes an external calibration session to calibrate flatness.

        
        Parameters
        ----------
        None
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_InitializeFlatnessCalibration(self.vi)


    def CalAdjustFlatness(self, channelName, configuration, requestedAmplitude,
                          frequencies, measuredAmplitudes):
        """
        During external calibration, the device is configured with the 
        different analog settings. Measurements are taken of the resulting 
        output voltage across different frequencies. The configuration data, 
        as well as the measurements, are passed to this function so that 
        NI-FGEN can calculate the appropriate calibration constants and, when
        the calibration session is committed, store them in the onboard EEPROM.
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the name of the channel being calibrated.

        configuration : int
            The analog path configuration of the device for this stage of 
            calibration. Refer to the calibration procedure for your device 
            for information on which configurations must be calibrated.

        requestedAmplitude : double
            The amplitude, in volts, that was used to configure NI-FGEN to 
            generate the sine tones at different frequencies.

        frequencies : double numpy.ndarray
            Specifies the frequencies of the output waveform in hertz.

        measuredAmplitudes : double numpy.ndarray
            Specifies the actual (measured) amplitudes of the output waveform in volts.

        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        return pynifgen.niFgen_CalAdjustFlatness(self.vi, channelName,
                                                 configuration, 
                                                 requestedAmplitude, 
                                                 frequencies, 
                                                 measuredAmplitudes, 
                                                 measuredAmplitudes.size)

    def WriteBinary16AnalogStaticValue(self, channelName, value):
        """
        Write Binary 16 Analog Static Value
        
        
        Parameters
        ----------
        channelName : str, optional
            Specifies the channel name for which you want to write the value.

        value : int
            The value to write.
        
        
        Returns
        -------
        vistatus : int
            Status code of this operation
        
        """
        
        return pynifgen.niFgen_WriteBinary16AnalogStaticValue(self.vi, 
                                                              channelName, 
                                                              value)
        